// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messaging-protobuf/xiaomi-mimc/src/main/proto/mimc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include <mimc/mimc.pb.h>

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mimc {

namespace {

const ::google::protobuf::Descriptor* FilterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PullMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PullMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAppinfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAppinfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Appinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Appinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MIMCPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MIMCPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* MIMCPacketList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MIMCPacketList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MIMCPacketAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MIMCPacketAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MIMCP2PMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MIMCP2PMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MIMCP2TMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MIMCP2TMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MIMCSequenceAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MIMCSequenceAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MIMCPull_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MIMCPull_reflection_ = NULL;
const ::google::protobuf::Descriptor* MIMCUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MIMCUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* MIMCGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MIMCGroup_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MIMC_MSG_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto() {
  protobuf_AddDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messaging-protobuf/xiaomi-mimc/src/main/proto/mimc.proto");
  GOOGLE_CHECK(file != NULL);
  FilterRequest_descriptor_ = file->message_type(0);
  static const int FilterRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterRequest, packet_),
  };
  FilterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FilterRequest_descriptor_,
      FilterRequest::default_instance_,
      FilterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FilterRequest));
  FilterResponse_descriptor_ = file->message_type(1);
  static const int FilterResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterResponse, isfilter_),
  };
  FilterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FilterResponse_descriptor_,
      FilterResponse::default_instance_,
      FilterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FilterResponse));
  PullMessageRequest_descriptor_ = file->message_type(2);
  static const int PullMessageRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullMessageRequest, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullMessageRequest, resource_),
  };
  PullMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PullMessageRequest_descriptor_,
      PullMessageRequest::default_instance_,
      PullMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PullMessageRequest));
  TopicMessage_descriptor_ = file->message_type(3);
  static const int TopicMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, topicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, packet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, resource_),
  };
  TopicMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicMessage_descriptor_,
      TopicMessage::default_instance_,
      TopicMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicMessage));
  QueryAppinfoRequest_descriptor_ = file->message_type(4);
  static const int QueryAppinfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAppinfoRequest, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAppinfoRequest, context_),
  };
  QueryAppinfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryAppinfoRequest_descriptor_,
      QueryAppinfoRequest::default_instance_,
      QueryAppinfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAppinfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAppinfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryAppinfoRequest));
  Appinfo_descriptor_ = file->message_type(5);
  static const int Appinfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appinfo, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appinfo, msgcallbackurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appinfo, offlinemsgcallbackurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appinfo, uuidttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appinfo, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appinfo, messagefilter_),
  };
  Appinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Appinfo_descriptor_,
      Appinfo::default_instance_,
      Appinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Appinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Appinfo));
  MIMCPacket_descriptor_ = file->message_type(6);
  static const int MIMCPacket_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacket, packetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacket, package_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacket, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacket, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacket, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacket, timestamp_),
  };
  MIMCPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MIMCPacket_descriptor_,
      MIMCPacket::default_instance_,
      MIMCPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MIMCPacket));
  MIMCPacketList_descriptor_ = file->message_type(7);
  static const int MIMCPacketList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacketList, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacketList, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacketList, maxsequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacketList, packets_),
  };
  MIMCPacketList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MIMCPacketList_descriptor_,
      MIMCPacketList::default_instance_,
      MIMCPacketList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacketList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacketList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MIMCPacketList));
  MIMCPacketAck_descriptor_ = file->message_type(8);
  static const int MIMCPacketAck_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacketAck, packetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacketAck, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacketAck, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacketAck, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacketAck, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacketAck, package_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacketAck, errormsg_),
  };
  MIMCPacketAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MIMCPacketAck_descriptor_,
      MIMCPacketAck::default_instance_,
      MIMCPacketAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacketAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPacketAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MIMCPacketAck));
  MIMCP2PMessage_descriptor_ = file->message_type(9);
  static const int MIMCP2PMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCP2PMessage, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCP2PMessage, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCP2PMessage, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCP2PMessage, isstore_),
  };
  MIMCP2PMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MIMCP2PMessage_descriptor_,
      MIMCP2PMessage::default_instance_,
      MIMCP2PMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCP2PMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCP2PMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MIMCP2PMessage));
  MIMCP2TMessage_descriptor_ = file->message_type(10);
  static const int MIMCP2TMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCP2TMessage, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCP2TMessage, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCP2TMessage, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCP2TMessage, isstore_),
  };
  MIMCP2TMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MIMCP2TMessage_descriptor_,
      MIMCP2TMessage::default_instance_,
      MIMCP2TMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCP2TMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCP2TMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MIMCP2TMessage));
  MIMCSequenceAck_descriptor_ = file->message_type(11);
  static const int MIMCSequenceAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCSequenceAck, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCSequenceAck, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCSequenceAck, sequence_),
  };
  MIMCSequenceAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MIMCSequenceAck_descriptor_,
      MIMCSequenceAck::default_instance_,
      MIMCSequenceAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCSequenceAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCSequenceAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MIMCSequenceAck));
  MIMCPull_descriptor_ = file->message_type(12);
  static const int MIMCPull_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPull, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPull, resource_),
  };
  MIMCPull_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MIMCPull_descriptor_,
      MIMCPull::default_instance_,
      MIMCPull_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPull, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCPull, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MIMCPull));
  MIMCUser_descriptor_ = file->message_type(13);
  static const int MIMCUser_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCUser, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCUser, appaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCUser, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCUser, resource_),
  };
  MIMCUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MIMCUser_descriptor_,
      MIMCUser::default_instance_,
      MIMCUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MIMCUser));
  MIMCGroup_descriptor_ = file->message_type(14);
  static const int MIMCGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCGroup, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCGroup, topicid_),
  };
  MIMCGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MIMCGroup_descriptor_,
      MIMCGroup::default_instance_,
      MIMCGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIMCGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MIMCGroup));
  ErrorCode_descriptor_ = file->enum_type(0);
  MIMC_MSG_TYPE_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FilterRequest_descriptor_, &FilterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FilterResponse_descriptor_, &FilterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PullMessageRequest_descriptor_, &PullMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicMessage_descriptor_, &TopicMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryAppinfoRequest_descriptor_, &QueryAppinfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Appinfo_descriptor_, &Appinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MIMCPacket_descriptor_, &MIMCPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MIMCPacketList_descriptor_, &MIMCPacketList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MIMCPacketAck_descriptor_, &MIMCPacketAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MIMCP2PMessage_descriptor_, &MIMCP2PMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MIMCP2TMessage_descriptor_, &MIMCP2TMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MIMCSequenceAck_descriptor_, &MIMCSequenceAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MIMCPull_descriptor_, &MIMCPull::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MIMCUser_descriptor_, &MIMCUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MIMCGroup_descriptor_, &MIMCGroup::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto() {
  delete FilterRequest::default_instance_;
  delete FilterRequest_reflection_;
  delete FilterResponse::default_instance_;
  delete FilterResponse_reflection_;
  delete PullMessageRequest::default_instance_;
  delete PullMessageRequest_reflection_;
  delete TopicMessage::default_instance_;
  delete TopicMessage_reflection_;
  delete QueryAppinfoRequest::default_instance_;
  delete QueryAppinfoRequest_reflection_;
  delete Appinfo::default_instance_;
  delete Appinfo_reflection_;
  delete MIMCPacket::default_instance_;
  delete MIMCPacket_reflection_;
  delete MIMCPacketList::default_instance_;
  delete MIMCPacketList_reflection_;
  delete MIMCPacketAck::default_instance_;
  delete MIMCPacketAck_reflection_;
  delete MIMCP2PMessage::default_instance_;
  delete MIMCP2PMessage_reflection_;
  delete MIMCP2TMessage::default_instance_;
  delete MIMCP2TMessage_reflection_;
  delete MIMCSequenceAck::default_instance_;
  delete MIMCSequenceAck_reflection_;
  delete MIMCPull::default_instance_;
  delete MIMCPull_reflection_;
  delete MIMCUser::default_instance_;
  delete MIMCUser_reflection_;
  delete MIMCGroup::default_instance_;
  delete MIMCGroup_reflection_;
}

void protobuf_AddDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n8messaging-protobuf/xiaomi-mimc/src/mai"
    "n/proto/mimc.proto\022\004mimc\"=\n\rFilterReques"
    "t\022\n\n\002id\030\001 \002(\t\022 \n\006packet\030\002 \002(\0132\020.mimc.MIM"
    "CPacket\"u\n\016FilterResponse\022\n\n\002id\030\001 \002(\t\022!\n"
    "\004type\030\002 \001(\0162\023.mimc.MIMC_MSG_TYPE\022\"\n\terro"
    "rCode\030\003 \001(\0162\017.mimc.ErrorCode\022\020\n\010isFilter"
    "\030\004 \001(\010\"4\n\022PullMessageRequest\022\014\n\004uuid\030\001 \002"
    "(\004\022\020\n\010resource\030\002 \002(\t\"a\n\014TopicMessage\022\017\n\007"
    "topicId\030\001 \002(\004\022 \n\006packet\030\002 \002(\0132\020.mimc.MIM"
    "CPacket\022\014\n\004uuid\030\003 \001(\003\022\020\n\010resource\030\004 \001(\t\""
    "5\n\023QueryAppinfoRequest\022\r\n\005appId\030\001 \002(\004\022\017\n"
    "\007context\030\002 \001(\t\"\210\001\n\007Appinfo\022\r\n\005appId\030\001 \002("
    "\004\022\026\n\016msgCallbackUrl\030\002 \001(\t\022\035\n\025offlineMsgC"
    "allbackUrl\030\003 \001(\t\022\017\n\007uuidTTL\030\004 \001(\004\022\017\n\007con"
    "text\030\005 \001(\t\022\025\n\rmessageFilter\030\006 \001(\t\"\210\001\n\nMI"
    "MCPacket\022\020\n\010packetId\030\001 \001(\t\022\017\n\007package\030\002 "
    "\001(\t\022\020\n\010sequence\030\003 \001(\003\022!\n\004type\030\004 \001(\0162\023.mi"
    "mc.MIMC_MSG_TYPE\022\017\n\007payload\030\005 \001(\014\022\021\n\ttim"
    "estamp\030\006 \001(\003\"h\n\016MIMCPacketList\022\014\n\004uuid\030\001"
    " \001(\003\022\020\n\010resource\030\002 \001(\t\022\023\n\013maxSequence\030\003 "
    "\001(\003\022!\n\007packets\030\004 \003(\0132\020.mimc.MIMCPacket\"\211"
    "\001\n\rMIMCPacketAck\022\020\n\010packetId\030\001 \001(\t\022\014\n\004uu"
    "id\030\002 \001(\003\022\020\n\010resource\030\003 \001(\t\022\020\n\010sequence\030\004"
    " \001(\003\022\021\n\ttimestamp\030\005 \001(\003\022\017\n\007package\030\006 \001(\t"
    "\022\020\n\010errorMsg\030\007 \001(\t\"l\n\016MIMCP2PMessage\022\034\n\004"
    "from\030\001 \001(\0132\016.mimc.MIMCUser\022\032\n\002to\030\002 \001(\0132\016"
    ".mimc.MIMCUser\022\017\n\007payload\030\003 \001(\014\022\017\n\007isSto"
    "re\030\004 \001(\010\"m\n\016MIMCP2TMessage\022\034\n\004from\030\001 \001(\013"
    "2\016.mimc.MIMCUser\022\033\n\002to\030\002 \001(\0132\017.mimc.MIMC"
    "Group\022\017\n\007payload\030\003 \001(\014\022\017\n\007isStore\030\004 \001(\010\""
    "C\n\017MIMCSequenceAck\022\014\n\004uuid\030\001 \001(\003\022\020\n\010reso"
    "urce\030\002 \001(\t\022\020\n\010sequence\030\003 \001(\003\"*\n\010MIMCPull"
    "\022\014\n\004uuid\030\001 \001(\003\022\020\n\010resource\030\002 \001(\t\"M\n\010MIMC"
    "User\022\r\n\005appId\030\001 \001(\003\022\022\n\nappAccount\030\002 \001(\t\022"
    "\014\n\004uuid\030\003 \001(\003\022\020\n\010resource\030\004 \001(\t\"+\n\tMIMCG"
    "roup\022\r\n\005appId\030\001 \001(\003\022\017\n\007topicId\030\002 \001(\003*\'\n\t"
    "ErrorCode\022\006\n\002OK\020\001\022\022\n\016INTERNAL_ERROR\020\002*k\n"
    "\rMIMC_MSG_TYPE\022\017\n\013P2P_MESSAGE\020\001\022\017\n\013P2T_M"
    "ESSAGE\020\002\022\020\n\014SEQUENCE_ACK\020\003\022\016\n\nPACKET_ACK"
    "\020\004\022\010\n\004PULL\020\005\022\014\n\010COMPOUND\020\006B\027\n\025com.xiaomi"
    ".mimc.proto", 1611);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messaging-protobuf/xiaomi-mimc/src/main/proto/mimc.proto", &protobuf_RegisterTypes);
  FilterRequest::default_instance_ = new FilterRequest();
  FilterResponse::default_instance_ = new FilterResponse();
  PullMessageRequest::default_instance_ = new PullMessageRequest();
  TopicMessage::default_instance_ = new TopicMessage();
  QueryAppinfoRequest::default_instance_ = new QueryAppinfoRequest();
  Appinfo::default_instance_ = new Appinfo();
  MIMCPacket::default_instance_ = new MIMCPacket();
  MIMCPacketList::default_instance_ = new MIMCPacketList();
  MIMCPacketAck::default_instance_ = new MIMCPacketAck();
  MIMCP2PMessage::default_instance_ = new MIMCP2PMessage();
  MIMCP2TMessage::default_instance_ = new MIMCP2TMessage();
  MIMCSequenceAck::default_instance_ = new MIMCSequenceAck();
  MIMCPull::default_instance_ = new MIMCPull();
  MIMCUser::default_instance_ = new MIMCUser();
  MIMCGroup::default_instance_ = new MIMCGroup();
  FilterRequest::default_instance_->InitAsDefaultInstance();
  FilterResponse::default_instance_->InitAsDefaultInstance();
  PullMessageRequest::default_instance_->InitAsDefaultInstance();
  TopicMessage::default_instance_->InitAsDefaultInstance();
  QueryAppinfoRequest::default_instance_->InitAsDefaultInstance();
  Appinfo::default_instance_->InitAsDefaultInstance();
  MIMCPacket::default_instance_->InitAsDefaultInstance();
  MIMCPacketList::default_instance_->InitAsDefaultInstance();
  MIMCPacketAck::default_instance_->InitAsDefaultInstance();
  MIMCP2PMessage::default_instance_->InitAsDefaultInstance();
  MIMCP2TMessage::default_instance_->InitAsDefaultInstance();
  MIMCSequenceAck::default_instance_->InitAsDefaultInstance();
  MIMCPull::default_instance_->InitAsDefaultInstance();
  MIMCUser::default_instance_->InitAsDefaultInstance();
  MIMCGroup::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto {
  StaticDescriptorInitializer_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto() {
    protobuf_AddDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto();
  }
} static_descriptor_initializer_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto_;
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCode_descriptor_;
}
bool ErrorCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MIMC_MSG_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MIMC_MSG_TYPE_descriptor_;
}
bool MIMC_MSG_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int FilterRequest::kIdFieldNumber;
const int FilterRequest::kPacketFieldNumber;
#endif  // !_MSC_VER

FilterRequest::FilterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FilterRequest::InitAsDefaultInstance() {
  packet_ = const_cast< ::mimc::MIMCPacket*>(&::mimc::MIMCPacket::default_instance());
}

FilterRequest::FilterRequest(const FilterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FilterRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  packet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilterRequest::~FilterRequest() {
  SharedDtor();
}

void FilterRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
    delete packet_;
  }
}

void FilterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterRequest_descriptor_;
}

const FilterRequest& FilterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto();
  return *default_instance_;
}

FilterRequest* FilterRequest::default_instance_ = NULL;

FilterRequest* FilterRequest::New() const {
  return new FilterRequest;
}

void FilterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_packet()) {
      if (packet_ != NULL) packet_->::mimc::MIMCPacket::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FilterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_packet;
        break;
      }

      // required .mimc.MIMCPacket packet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FilterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required .mimc.MIMCPacket packet = 2;
  if (has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->packet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FilterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .mimc.MIMCPacket packet = 2;
  if (has_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->packet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FilterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required .mimc.MIMCPacket packet = 2;
    if (has_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->packet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FilterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FilterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilterRequest::MergeFrom(const FilterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_packet()) {
      mutable_packet()->::mimc::MIMCPacket::MergeFrom(from.packet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FilterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterRequest::CopyFrom(const FilterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FilterRequest::Swap(FilterRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(packet_, other->packet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FilterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilterRequest_descriptor_;
  metadata.reflection = FilterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FilterResponse::kIdFieldNumber;
const int FilterResponse::kTypeFieldNumber;
const int FilterResponse::kErrorCodeFieldNumber;
const int FilterResponse::kIsFilterFieldNumber;
#endif  // !_MSC_VER

FilterResponse::FilterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FilterResponse::InitAsDefaultInstance() {
}

FilterResponse::FilterResponse(const FilterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FilterResponse::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  errorcode_ = 1;
  isfilter_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilterResponse::~FilterResponse() {
  SharedDtor();
}

void FilterResponse::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void FilterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterResponse_descriptor_;
}

const FilterResponse& FilterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto();
  return *default_instance_;
}

FilterResponse* FilterResponse::default_instance_ = NULL;

FilterResponse* FilterResponse::New() const {
  return new FilterResponse;
}

void FilterResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    type_ = 1;
    errorcode_ = 1;
    isfilter_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FilterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .mimc.MIMC_MSG_TYPE type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mimc::MIMC_MSG_TYPE_IsValid(value)) {
            set_type(static_cast< ::mimc::MIMC_MSG_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_errorCode;
        break;
      }

      // optional .mimc.ErrorCode errorCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorCode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mimc::ErrorCode_IsValid(value)) {
            set_errorcode(static_cast< ::mimc::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isFilter;
        break;
      }

      // optional bool isFilter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFilter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfilter_)));
          set_has_isfilter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FilterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional .mimc.MIMC_MSG_TYPE type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .mimc.ErrorCode errorCode = 3;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->errorcode(), output);
  }

  // optional bool isFilter = 4;
  if (has_isfilter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isfilter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FilterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .mimc.MIMC_MSG_TYPE type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .mimc.ErrorCode errorCode = 3;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->errorcode(), target);
  }

  // optional bool isFilter = 4;
  if (has_isfilter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isfilter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FilterResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .mimc.MIMC_MSG_TYPE type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .mimc.ErrorCode errorCode = 3;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errorcode());
    }

    // optional bool isFilter = 4;
    if (has_isfilter()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FilterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FilterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilterResponse::MergeFrom(const FilterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_isfilter()) {
      set_isfilter(from.isfilter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FilterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterResponse::CopyFrom(const FilterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FilterResponse::Swap(FilterResponse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(isfilter_, other->isfilter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FilterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilterResponse_descriptor_;
  metadata.reflection = FilterResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PullMessageRequest::kUuidFieldNumber;
const int PullMessageRequest::kResourceFieldNumber;
#endif  // !_MSC_VER

PullMessageRequest::PullMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PullMessageRequest::InitAsDefaultInstance() {
}

PullMessageRequest::PullMessageRequest(const PullMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PullMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PullMessageRequest::~PullMessageRequest() {
  SharedDtor();
}

void PullMessageRequest::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (this != default_instance_) {
  }
}

void PullMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PullMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PullMessageRequest_descriptor_;
}

const PullMessageRequest& PullMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto();
  return *default_instance_;
}

PullMessageRequest* PullMessageRequest::default_instance_ = NULL;

PullMessageRequest* PullMessageRequest::New() const {
  return new PullMessageRequest;
}

void PullMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PullMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // required string resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PullMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // required string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PullMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // required string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PullMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // required string resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PullMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PullMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PullMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PullMessageRequest::MergeFrom(const PullMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PullMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullMessageRequest::CopyFrom(const PullMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PullMessageRequest::Swap(PullMessageRequest* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(resource_, other->resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PullMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PullMessageRequest_descriptor_;
  metadata.reflection = PullMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TopicMessage::kTopicIdFieldNumber;
const int TopicMessage::kPacketFieldNumber;
const int TopicMessage::kUuidFieldNumber;
const int TopicMessage::kResourceFieldNumber;
#endif  // !_MSC_VER

TopicMessage::TopicMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopicMessage::InitAsDefaultInstance() {
  packet_ = const_cast< ::mimc::MIMCPacket*>(&::mimc::MIMCPacket::default_instance());
}

TopicMessage::TopicMessage(const TopicMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopicMessage::SharedCtor() {
  _cached_size_ = 0;
  topicid_ = GOOGLE_ULONGLONG(0);
  packet_ = NULL;
  uuid_ = GOOGLE_LONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicMessage::~TopicMessage() {
  SharedDtor();
}

void TopicMessage::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (this != default_instance_) {
    delete packet_;
  }
}

void TopicMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicMessage_descriptor_;
}

const TopicMessage& TopicMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto();
  return *default_instance_;
}

TopicMessage* TopicMessage::default_instance_ = NULL;

TopicMessage* TopicMessage::New() const {
  return new TopicMessage;
}

void TopicMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    topicid_ = GOOGLE_ULONGLONG(0);
    if (has_packet()) {
      if (packet_ != NULL) packet_->::mimc::MIMCPacket::Clear();
    }
    uuid_ = GOOGLE_LONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 topicId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &topicid_)));
          set_has_topicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_packet;
        break;
      }

      // required .mimc.MIMCPacket packet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resource;
        break;
      }

      // optional string resource = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopicMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 topicId = 1;
  if (has_topicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->topicid(), output);
  }

  // required .mimc.MIMCPacket packet = 2;
  if (has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->packet(), output);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uuid(), output);
  }

  // optional string resource = 4;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->resource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopicMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 topicId = 1;
  if (has_topicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->topicid(), target);
  }

  // required .mimc.MIMCPacket packet = 2;
  if (has_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->packet(), target);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uuid(), target);
  }

  // optional string resource = 4;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->resource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopicMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 topicId = 1;
    if (has_topicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->topicid());
    }

    // required .mimc.MIMCPacket packet = 2;
    if (has_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->packet());
    }

    // optional int64 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional string resource = 4;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicMessage::MergeFrom(const TopicMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topicid()) {
      set_topicid(from.topicid());
    }
    if (from.has_packet()) {
      mutable_packet()->::mimc::MIMCPacket::MergeFrom(from.packet());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicMessage::CopyFrom(const TopicMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TopicMessage::Swap(TopicMessage* other) {
  if (other != this) {
    std::swap(topicid_, other->topicid_);
    std::swap(packet_, other->packet_);
    std::swap(uuid_, other->uuid_);
    std::swap(resource_, other->resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicMessage_descriptor_;
  metadata.reflection = TopicMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryAppinfoRequest::kAppIdFieldNumber;
const int QueryAppinfoRequest::kContextFieldNumber;
#endif  // !_MSC_VER

QueryAppinfoRequest::QueryAppinfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryAppinfoRequest::InitAsDefaultInstance() {
}

QueryAppinfoRequest::QueryAppinfoRequest(const QueryAppinfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryAppinfoRequest::SharedCtor() {
  _cached_size_ = 0;
  appid_ = GOOGLE_ULONGLONG(0);
  context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryAppinfoRequest::~QueryAppinfoRequest() {
  SharedDtor();
}

void QueryAppinfoRequest::SharedDtor() {
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    delete context_;
  }
  if (this != default_instance_) {
  }
}

void QueryAppinfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAppinfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAppinfoRequest_descriptor_;
}

const QueryAppinfoRequest& QueryAppinfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto();
  return *default_instance_;
}

QueryAppinfoRequest* QueryAppinfoRequest::default_instance_ = NULL;

QueryAppinfoRequest* QueryAppinfoRequest::New() const {
  return new QueryAppinfoRequest;
}

void QueryAppinfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = GOOGLE_ULONGLONG(0);
    if (has_context()) {
      if (context_ != &::google::protobuf::internal::kEmptyString) {
        context_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryAppinfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 appId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_context;
        break;
      }

      // optional string context = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->context().data(), this->context().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryAppinfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 appId = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->appid(), output);
  }

  // optional string context = 2;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->context(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryAppinfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 appId = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->appid(), target);
  }

  // optional string context = 2;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->context(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryAppinfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 appId = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->appid());
    }

    // optional string context = 2;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAppinfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryAppinfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryAppinfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryAppinfoRequest::MergeFrom(const QueryAppinfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryAppinfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAppinfoRequest::CopyFrom(const QueryAppinfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAppinfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryAppinfoRequest::Swap(QueryAppinfoRequest* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(context_, other->context_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryAppinfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAppinfoRequest_descriptor_;
  metadata.reflection = QueryAppinfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Appinfo::kAppIdFieldNumber;
const int Appinfo::kMsgCallbackUrlFieldNumber;
const int Appinfo::kOfflineMsgCallbackUrlFieldNumber;
const int Appinfo::kUuidTTLFieldNumber;
const int Appinfo::kContextFieldNumber;
const int Appinfo::kMessageFilterFieldNumber;
#endif  // !_MSC_VER

Appinfo::Appinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Appinfo::InitAsDefaultInstance() {
}

Appinfo::Appinfo(const Appinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Appinfo::SharedCtor() {
  _cached_size_ = 0;
  appid_ = GOOGLE_ULONGLONG(0);
  msgcallbackurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offlinemsgcallbackurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuidttl_ = GOOGLE_ULONGLONG(0);
  context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  messagefilter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Appinfo::~Appinfo() {
  SharedDtor();
}

void Appinfo::SharedDtor() {
  if (msgcallbackurl_ != &::google::protobuf::internal::kEmptyString) {
    delete msgcallbackurl_;
  }
  if (offlinemsgcallbackurl_ != &::google::protobuf::internal::kEmptyString) {
    delete offlinemsgcallbackurl_;
  }
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    delete context_;
  }
  if (messagefilter_ != &::google::protobuf::internal::kEmptyString) {
    delete messagefilter_;
  }
  if (this != default_instance_) {
  }
}

void Appinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Appinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Appinfo_descriptor_;
}

const Appinfo& Appinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto();
  return *default_instance_;
}

Appinfo* Appinfo::default_instance_ = NULL;

Appinfo* Appinfo::New() const {
  return new Appinfo;
}

void Appinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = GOOGLE_ULONGLONG(0);
    if (has_msgcallbackurl()) {
      if (msgcallbackurl_ != &::google::protobuf::internal::kEmptyString) {
        msgcallbackurl_->clear();
      }
    }
    if (has_offlinemsgcallbackurl()) {
      if (offlinemsgcallbackurl_ != &::google::protobuf::internal::kEmptyString) {
        offlinemsgcallbackurl_->clear();
      }
    }
    uuidttl_ = GOOGLE_ULONGLONG(0);
    if (has_context()) {
      if (context_ != &::google::protobuf::internal::kEmptyString) {
        context_->clear();
      }
    }
    if (has_messagefilter()) {
      if (messagefilter_ != &::google::protobuf::internal::kEmptyString) {
        messagefilter_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Appinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 appId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgCallbackUrl;
        break;
      }

      // optional string msgCallbackUrl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgCallbackUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgcallbackurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgcallbackurl().data(), this->msgcallbackurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_offlineMsgCallbackUrl;
        break;
      }

      // optional string offlineMsgCallbackUrl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offlineMsgCallbackUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_offlinemsgcallbackurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->offlinemsgcallbackurl().data(), this->offlinemsgcallbackurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uuidTTL;
        break;
      }

      // optional uint64 uuidTTL = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuidTTL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuidttl_)));
          set_has_uuidttl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_context;
        break;
      }

      // optional string context = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->context().data(), this->context().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_messageFilter;
        break;
      }

      // optional string messageFilter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messageFilter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagefilter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messagefilter().data(), this->messagefilter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Appinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 appId = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->appid(), output);
  }

  // optional string msgCallbackUrl = 2;
  if (has_msgcallbackurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgcallbackurl().data(), this->msgcallbackurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msgcallbackurl(), output);
  }

  // optional string offlineMsgCallbackUrl = 3;
  if (has_offlinemsgcallbackurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->offlinemsgcallbackurl().data(), this->offlinemsgcallbackurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->offlinemsgcallbackurl(), output);
  }

  // optional uint64 uuidTTL = 4;
  if (has_uuidttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uuidttl(), output);
  }

  // optional string context = 5;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->context(), output);
  }

  // optional string messageFilter = 6;
  if (has_messagefilter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messagefilter().data(), this->messagefilter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->messagefilter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Appinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 appId = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->appid(), target);
  }

  // optional string msgCallbackUrl = 2;
  if (has_msgcallbackurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgcallbackurl().data(), this->msgcallbackurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msgcallbackurl(), target);
  }

  // optional string offlineMsgCallbackUrl = 3;
  if (has_offlinemsgcallbackurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->offlinemsgcallbackurl().data(), this->offlinemsgcallbackurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->offlinemsgcallbackurl(), target);
  }

  // optional uint64 uuidTTL = 4;
  if (has_uuidttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->uuidttl(), target);
  }

  // optional string context = 5;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->context(), target);
  }

  // optional string messageFilter = 6;
  if (has_messagefilter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messagefilter().data(), this->messagefilter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->messagefilter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Appinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 appId = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->appid());
    }

    // optional string msgCallbackUrl = 2;
    if (has_msgcallbackurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgcallbackurl());
    }

    // optional string offlineMsgCallbackUrl = 3;
    if (has_offlinemsgcallbackurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->offlinemsgcallbackurl());
    }

    // optional uint64 uuidTTL = 4;
    if (has_uuidttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuidttl());
    }

    // optional string context = 5;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context());
    }

    // optional string messageFilter = 6;
    if (has_messagefilter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagefilter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Appinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Appinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Appinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Appinfo::MergeFrom(const Appinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_msgcallbackurl()) {
      set_msgcallbackurl(from.msgcallbackurl());
    }
    if (from.has_offlinemsgcallbackurl()) {
      set_offlinemsgcallbackurl(from.offlinemsgcallbackurl());
    }
    if (from.has_uuidttl()) {
      set_uuidttl(from.uuidttl());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_messagefilter()) {
      set_messagefilter(from.messagefilter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Appinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Appinfo::CopyFrom(const Appinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Appinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Appinfo::Swap(Appinfo* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(msgcallbackurl_, other->msgcallbackurl_);
    std::swap(offlinemsgcallbackurl_, other->offlinemsgcallbackurl_);
    std::swap(uuidttl_, other->uuidttl_);
    std::swap(context_, other->context_);
    std::swap(messagefilter_, other->messagefilter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Appinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Appinfo_descriptor_;
  metadata.reflection = Appinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MIMCPacket::kPacketIdFieldNumber;
const int MIMCPacket::kPackageFieldNumber;
const int MIMCPacket::kSequenceFieldNumber;
const int MIMCPacket::kTypeFieldNumber;
const int MIMCPacket::kPayloadFieldNumber;
const int MIMCPacket::kTimestampFieldNumber;
#endif  // !_MSC_VER

MIMCPacket::MIMCPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MIMCPacket::InitAsDefaultInstance() {
}

MIMCPacket::MIMCPacket(const MIMCPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MIMCPacket::SharedCtor() {
  _cached_size_ = 0;
  packetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  package_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sequence_ = GOOGLE_LONGLONG(0);
  type_ = 1;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MIMCPacket::~MIMCPacket() {
  SharedDtor();
}

void MIMCPacket::SharedDtor() {
  if (packetid_ != &::google::protobuf::internal::kEmptyString) {
    delete packetid_;
  }
  if (package_ != &::google::protobuf::internal::kEmptyString) {
    delete package_;
  }
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void MIMCPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MIMCPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MIMCPacket_descriptor_;
}

const MIMCPacket& MIMCPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto();
  return *default_instance_;
}

MIMCPacket* MIMCPacket::default_instance_ = NULL;

MIMCPacket* MIMCPacket::New() const {
  return new MIMCPacket;
}

void MIMCPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_packetid()) {
      if (packetid_ != &::google::protobuf::internal::kEmptyString) {
        packetid_->clear();
      }
    }
    if (has_package()) {
      if (package_ != &::google::protobuf::internal::kEmptyString) {
        package_->clear();
      }
    }
    sequence_ = GOOGLE_LONGLONG(0);
    type_ = 1;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
    timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MIMCPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string packetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packetid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->packetid().data(), this->packetid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_package;
        break;
      }

      // optional string package = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->package().data(), this->package().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sequence;
        break;
      }

      // optional int64 sequence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .mimc.MIMC_MSG_TYPE type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mimc::MIMC_MSG_TYPE_IsValid(value)) {
            set_type(static_cast< ::mimc::MIMC_MSG_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_payload;
        break;
      }

      // optional bytes payload = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MIMCPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string packetId = 1;
  if (has_packetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packetid().data(), this->packetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->packetid(), output);
  }

  // optional string package = 2;
  if (has_package()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->package(), output);
  }

  // optional int64 sequence = 3;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sequence(), output);
  }

  // optional .mimc.MIMC_MSG_TYPE type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional bytes payload = 5;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->payload(), output);
  }

  // optional int64 timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MIMCPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string packetId = 1;
  if (has_packetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packetid().data(), this->packetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->packetid(), target);
  }

  // optional string package = 2;
  if (has_package()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->package(), target);
  }

  // optional int64 sequence = 3;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sequence(), target);
  }

  // optional .mimc.MIMC_MSG_TYPE type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional bytes payload = 5;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->payload(), target);
  }

  // optional int64 timestamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MIMCPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string packetId = 1;
    if (has_packetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packetid());
    }

    // optional string package = 2;
    if (has_package()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->package());
    }

    // optional int64 sequence = 3;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence());
    }

    // optional .mimc.MIMC_MSG_TYPE type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes payload = 5;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional int64 timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MIMCPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MIMCPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MIMCPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MIMCPacket::MergeFrom(const MIMCPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packetid()) {
      set_packetid(from.packetid());
    }
    if (from.has_package()) {
      set_package(from.package());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MIMCPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MIMCPacket::CopyFrom(const MIMCPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MIMCPacket::IsInitialized() const {

  return true;
}

void MIMCPacket::Swap(MIMCPacket* other) {
  if (other != this) {
    std::swap(packetid_, other->packetid_);
    std::swap(package_, other->package_);
    std::swap(sequence_, other->sequence_);
    std::swap(type_, other->type_);
    std::swap(payload_, other->payload_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MIMCPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MIMCPacket_descriptor_;
  metadata.reflection = MIMCPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MIMCPacketList::kUuidFieldNumber;
const int MIMCPacketList::kResourceFieldNumber;
const int MIMCPacketList::kMaxSequenceFieldNumber;
const int MIMCPacketList::kPacketsFieldNumber;
#endif  // !_MSC_VER

MIMCPacketList::MIMCPacketList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MIMCPacketList::InitAsDefaultInstance() {
}

MIMCPacketList::MIMCPacketList(const MIMCPacketList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MIMCPacketList::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxsequence_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MIMCPacketList::~MIMCPacketList() {
  SharedDtor();
}

void MIMCPacketList::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (this != default_instance_) {
  }
}

void MIMCPacketList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MIMCPacketList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MIMCPacketList_descriptor_;
}

const MIMCPacketList& MIMCPacketList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto();
  return *default_instance_;
}

MIMCPacketList* MIMCPacketList::default_instance_ = NULL;

MIMCPacketList* MIMCPacketList::New() const {
  return new MIMCPacketList;
}

void MIMCPacketList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_LONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    maxsequence_ = GOOGLE_LONGLONG(0);
  }
  packets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MIMCPacketList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // optional string resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxSequence;
        break;
      }

      // optional int64 maxSequence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxSequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxsequence_)));
          set_has_maxsequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_packets;
        break;
      }

      // repeated .mimc.MIMCPacket packets = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_packets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_packets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MIMCPacketList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uuid(), output);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resource(), output);
  }

  // optional int64 maxSequence = 3;
  if (has_maxsequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->maxsequence(), output);
  }

  // repeated .mimc.MIMCPacket packets = 4;
  for (int i = 0; i < this->packets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->packets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MIMCPacketList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uuid(), target);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resource(), target);
  }

  // optional int64 maxSequence = 3;
  if (has_maxsequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->maxsequence(), target);
  }

  // repeated .mimc.MIMCPacket packets = 4;
  for (int i = 0; i < this->packets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->packets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MIMCPacketList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional string resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional int64 maxSequence = 3;
    if (has_maxsequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxsequence());
    }

  }
  // repeated .mimc.MIMCPacket packets = 4;
  total_size += 1 * this->packets_size();
  for (int i = 0; i < this->packets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->packets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MIMCPacketList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MIMCPacketList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MIMCPacketList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MIMCPacketList::MergeFrom(const MIMCPacketList& from) {
  GOOGLE_CHECK_NE(&from, this);
  packets_.MergeFrom(from.packets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_maxsequence()) {
      set_maxsequence(from.maxsequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MIMCPacketList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MIMCPacketList::CopyFrom(const MIMCPacketList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MIMCPacketList::IsInitialized() const {

  return true;
}

void MIMCPacketList::Swap(MIMCPacketList* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(resource_, other->resource_);
    std::swap(maxsequence_, other->maxsequence_);
    packets_.Swap(&other->packets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MIMCPacketList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MIMCPacketList_descriptor_;
  metadata.reflection = MIMCPacketList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MIMCPacketAck::kPacketIdFieldNumber;
const int MIMCPacketAck::kUuidFieldNumber;
const int MIMCPacketAck::kResourceFieldNumber;
const int MIMCPacketAck::kSequenceFieldNumber;
const int MIMCPacketAck::kTimestampFieldNumber;
const int MIMCPacketAck::kPackageFieldNumber;
const int MIMCPacketAck::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

MIMCPacketAck::MIMCPacketAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MIMCPacketAck::InitAsDefaultInstance() {
}

MIMCPacketAck::MIMCPacketAck(const MIMCPacketAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MIMCPacketAck::SharedCtor() {
  _cached_size_ = 0;
  packetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_ = GOOGLE_LONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sequence_ = GOOGLE_LONGLONG(0);
  timestamp_ = GOOGLE_LONGLONG(0);
  package_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MIMCPacketAck::~MIMCPacketAck() {
  SharedDtor();
}

void MIMCPacketAck::SharedDtor() {
  if (packetid_ != &::google::protobuf::internal::kEmptyString) {
    delete packetid_;
  }
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (package_ != &::google::protobuf::internal::kEmptyString) {
    delete package_;
  }
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void MIMCPacketAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MIMCPacketAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MIMCPacketAck_descriptor_;
}

const MIMCPacketAck& MIMCPacketAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto();
  return *default_instance_;
}

MIMCPacketAck* MIMCPacketAck::default_instance_ = NULL;

MIMCPacketAck* MIMCPacketAck::New() const {
  return new MIMCPacketAck;
}

void MIMCPacketAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_packetid()) {
      if (packetid_ != &::google::protobuf::internal::kEmptyString) {
        packetid_->clear();
      }
    }
    uuid_ = GOOGLE_LONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    sequence_ = GOOGLE_LONGLONG(0);
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_package()) {
      if (package_ != &::google::protobuf::internal::kEmptyString) {
        package_->clear();
      }
    }
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MIMCPacketAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string packetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packetid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->packetid().data(), this->packetid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resource;
        break;
      }

      // optional string resource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sequence;
        break;
      }

      // optional int64 sequence = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_package;
        break;
      }

      // optional string package = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->package().data(), this->package().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_errorMsg;
        break;
      }

      // optional string errorMsg = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MIMCPacketAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string packetId = 1;
  if (has_packetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packetid().data(), this->packetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->packetid(), output);
  }

  // optional int64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uuid(), output);
  }

  // optional string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->resource(), output);
  }

  // optional int64 sequence = 4;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->sequence(), output);
  }

  // optional int64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->timestamp(), output);
  }

  // optional string package = 6;
  if (has_package()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->package(), output);
  }

  // optional string errorMsg = 7;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->errormsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MIMCPacketAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string packetId = 1;
  if (has_packetid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packetid().data(), this->packetid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->packetid(), target);
  }

  // optional int64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uuid(), target);
  }

  // optional string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resource(), target);
  }

  // optional int64 sequence = 4;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->sequence(), target);
  }

  // optional int64 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->timestamp(), target);
  }

  // optional string package = 6;
  if (has_package()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->package(), target);
  }

  // optional string errorMsg = 7;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->errormsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MIMCPacketAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string packetId = 1;
    if (has_packetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packetid());
    }

    // optional int64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional string resource = 3;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional int64 sequence = 4;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence());
    }

    // optional int64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional string package = 6;
    if (has_package()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->package());
    }

    // optional string errorMsg = 7;
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MIMCPacketAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MIMCPacketAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MIMCPacketAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MIMCPacketAck::MergeFrom(const MIMCPacketAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packetid()) {
      set_packetid(from.packetid());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_package()) {
      set_package(from.package());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MIMCPacketAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MIMCPacketAck::CopyFrom(const MIMCPacketAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MIMCPacketAck::IsInitialized() const {

  return true;
}

void MIMCPacketAck::Swap(MIMCPacketAck* other) {
  if (other != this) {
    std::swap(packetid_, other->packetid_);
    std::swap(uuid_, other->uuid_);
    std::swap(resource_, other->resource_);
    std::swap(sequence_, other->sequence_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(package_, other->package_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MIMCPacketAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MIMCPacketAck_descriptor_;
  metadata.reflection = MIMCPacketAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MIMCP2PMessage::kFromFieldNumber;
const int MIMCP2PMessage::kToFieldNumber;
const int MIMCP2PMessage::kPayloadFieldNumber;
const int MIMCP2PMessage::kIsStoreFieldNumber;
#endif  // !_MSC_VER

MIMCP2PMessage::MIMCP2PMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MIMCP2PMessage::InitAsDefaultInstance() {
  from_ = const_cast< ::mimc::MIMCUser*>(&::mimc::MIMCUser::default_instance());
  to_ = const_cast< ::mimc::MIMCUser*>(&::mimc::MIMCUser::default_instance());
}

MIMCP2PMessage::MIMCP2PMessage(const MIMCP2PMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MIMCP2PMessage::SharedCtor() {
  _cached_size_ = 0;
  from_ = NULL;
  to_ = NULL;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isstore_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MIMCP2PMessage::~MIMCP2PMessage() {
  SharedDtor();
}

void MIMCP2PMessage::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
    delete from_;
    delete to_;
  }
}

void MIMCP2PMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MIMCP2PMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MIMCP2PMessage_descriptor_;
}

const MIMCP2PMessage& MIMCP2PMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto();
  return *default_instance_;
}

MIMCP2PMessage* MIMCP2PMessage::default_instance_ = NULL;

MIMCP2PMessage* MIMCP2PMessage::New() const {
  return new MIMCP2PMessage;
}

void MIMCP2PMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from()) {
      if (from_ != NULL) from_->::mimc::MIMCUser::Clear();
    }
    if (has_to()) {
      if (to_ != NULL) to_->::mimc::MIMCUser::Clear();
    }
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
    isstore_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MIMCP2PMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mimc.MIMCUser from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // optional .mimc.MIMCUser to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_payload;
        break;
      }

      // optional bytes payload = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isStore;
        break;
      }

      // optional bool isStore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isStore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isstore_)));
          set_has_isstore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MIMCP2PMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mimc.MIMCUser from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->from(), output);
  }

  // optional .mimc.MIMCUser to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->to(), output);
  }

  // optional bytes payload = 3;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->payload(), output);
  }

  // optional bool isStore = 4;
  if (has_isstore()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isstore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MIMCP2PMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mimc.MIMCUser from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->from(), target);
  }

  // optional .mimc.MIMCUser to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->to(), target);
  }

  // optional bytes payload = 3;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload(), target);
  }

  // optional bool isStore = 4;
  if (has_isstore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isstore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MIMCP2PMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mimc.MIMCUser from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from());
    }

    // optional .mimc.MIMCUser to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to());
    }

    // optional bytes payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional bool isStore = 4;
    if (has_isstore()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MIMCP2PMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MIMCP2PMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MIMCP2PMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MIMCP2PMessage::MergeFrom(const MIMCP2PMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      mutable_from()->::mimc::MIMCUser::MergeFrom(from.from());
    }
    if (from.has_to()) {
      mutable_to()->::mimc::MIMCUser::MergeFrom(from.to());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_isstore()) {
      set_isstore(from.isstore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MIMCP2PMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MIMCP2PMessage::CopyFrom(const MIMCP2PMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MIMCP2PMessage::IsInitialized() const {

  return true;
}

void MIMCP2PMessage::Swap(MIMCP2PMessage* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(payload_, other->payload_);
    std::swap(isstore_, other->isstore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MIMCP2PMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MIMCP2PMessage_descriptor_;
  metadata.reflection = MIMCP2PMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MIMCP2TMessage::kFromFieldNumber;
const int MIMCP2TMessage::kToFieldNumber;
const int MIMCP2TMessage::kPayloadFieldNumber;
const int MIMCP2TMessage::kIsStoreFieldNumber;
#endif  // !_MSC_VER

MIMCP2TMessage::MIMCP2TMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MIMCP2TMessage::InitAsDefaultInstance() {
  from_ = const_cast< ::mimc::MIMCUser*>(&::mimc::MIMCUser::default_instance());
  to_ = const_cast< ::mimc::MIMCGroup*>(&::mimc::MIMCGroup::default_instance());
}

MIMCP2TMessage::MIMCP2TMessage(const MIMCP2TMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MIMCP2TMessage::SharedCtor() {
  _cached_size_ = 0;
  from_ = NULL;
  to_ = NULL;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isstore_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MIMCP2TMessage::~MIMCP2TMessage() {
  SharedDtor();
}

void MIMCP2TMessage::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
    delete from_;
    delete to_;
  }
}

void MIMCP2TMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MIMCP2TMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MIMCP2TMessage_descriptor_;
}

const MIMCP2TMessage& MIMCP2TMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto();
  return *default_instance_;
}

MIMCP2TMessage* MIMCP2TMessage::default_instance_ = NULL;

MIMCP2TMessage* MIMCP2TMessage::New() const {
  return new MIMCP2TMessage;
}

void MIMCP2TMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from()) {
      if (from_ != NULL) from_->::mimc::MIMCUser::Clear();
    }
    if (has_to()) {
      if (to_ != NULL) to_->::mimc::MIMCGroup::Clear();
    }
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
    isstore_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MIMCP2TMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mimc.MIMCUser from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // optional .mimc.MIMCGroup to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_payload;
        break;
      }

      // optional bytes payload = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isStore;
        break;
      }

      // optional bool isStore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isStore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isstore_)));
          set_has_isstore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MIMCP2TMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mimc.MIMCUser from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->from(), output);
  }

  // optional .mimc.MIMCGroup to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->to(), output);
  }

  // optional bytes payload = 3;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->payload(), output);
  }

  // optional bool isStore = 4;
  if (has_isstore()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isstore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MIMCP2TMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mimc.MIMCUser from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->from(), target);
  }

  // optional .mimc.MIMCGroup to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->to(), target);
  }

  // optional bytes payload = 3;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload(), target);
  }

  // optional bool isStore = 4;
  if (has_isstore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isstore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MIMCP2TMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mimc.MIMCUser from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from());
    }

    // optional .mimc.MIMCGroup to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to());
    }

    // optional bytes payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional bool isStore = 4;
    if (has_isstore()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MIMCP2TMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MIMCP2TMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MIMCP2TMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MIMCP2TMessage::MergeFrom(const MIMCP2TMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      mutable_from()->::mimc::MIMCUser::MergeFrom(from.from());
    }
    if (from.has_to()) {
      mutable_to()->::mimc::MIMCGroup::MergeFrom(from.to());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_isstore()) {
      set_isstore(from.isstore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MIMCP2TMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MIMCP2TMessage::CopyFrom(const MIMCP2TMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MIMCP2TMessage::IsInitialized() const {

  return true;
}

void MIMCP2TMessage::Swap(MIMCP2TMessage* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(payload_, other->payload_);
    std::swap(isstore_, other->isstore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MIMCP2TMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MIMCP2TMessage_descriptor_;
  metadata.reflection = MIMCP2TMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MIMCSequenceAck::kUuidFieldNumber;
const int MIMCSequenceAck::kResourceFieldNumber;
const int MIMCSequenceAck::kSequenceFieldNumber;
#endif  // !_MSC_VER

MIMCSequenceAck::MIMCSequenceAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MIMCSequenceAck::InitAsDefaultInstance() {
}

MIMCSequenceAck::MIMCSequenceAck(const MIMCSequenceAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MIMCSequenceAck::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sequence_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MIMCSequenceAck::~MIMCSequenceAck() {
  SharedDtor();
}

void MIMCSequenceAck::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (this != default_instance_) {
  }
}

void MIMCSequenceAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MIMCSequenceAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MIMCSequenceAck_descriptor_;
}

const MIMCSequenceAck& MIMCSequenceAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto();
  return *default_instance_;
}

MIMCSequenceAck* MIMCSequenceAck::default_instance_ = NULL;

MIMCSequenceAck* MIMCSequenceAck::New() const {
  return new MIMCSequenceAck;
}

void MIMCSequenceAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_LONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    sequence_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MIMCSequenceAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // optional string resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sequence;
        break;
      }

      // optional int64 sequence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MIMCSequenceAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uuid(), output);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resource(), output);
  }

  // optional int64 sequence = 3;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sequence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MIMCSequenceAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uuid(), target);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resource(), target);
  }

  // optional int64 sequence = 3;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sequence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MIMCSequenceAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional string resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional int64 sequence = 3;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MIMCSequenceAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MIMCSequenceAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MIMCSequenceAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MIMCSequenceAck::MergeFrom(const MIMCSequenceAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MIMCSequenceAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MIMCSequenceAck::CopyFrom(const MIMCSequenceAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MIMCSequenceAck::IsInitialized() const {

  return true;
}

void MIMCSequenceAck::Swap(MIMCSequenceAck* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(resource_, other->resource_);
    std::swap(sequence_, other->sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MIMCSequenceAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MIMCSequenceAck_descriptor_;
  metadata.reflection = MIMCSequenceAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MIMCPull::kUuidFieldNumber;
const int MIMCPull::kResourceFieldNumber;
#endif  // !_MSC_VER

MIMCPull::MIMCPull()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MIMCPull::InitAsDefaultInstance() {
}

MIMCPull::MIMCPull(const MIMCPull& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MIMCPull::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MIMCPull::~MIMCPull() {
  SharedDtor();
}

void MIMCPull::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (this != default_instance_) {
  }
}

void MIMCPull::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MIMCPull::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MIMCPull_descriptor_;
}

const MIMCPull& MIMCPull::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto();
  return *default_instance_;
}

MIMCPull* MIMCPull::default_instance_ = NULL;

MIMCPull* MIMCPull::New() const {
  return new MIMCPull;
}

void MIMCPull::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_LONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MIMCPull::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // optional string resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MIMCPull::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uuid(), output);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MIMCPull::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uuid(), target);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MIMCPull::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional string resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MIMCPull::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MIMCPull* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MIMCPull*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MIMCPull::MergeFrom(const MIMCPull& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MIMCPull::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MIMCPull::CopyFrom(const MIMCPull& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MIMCPull::IsInitialized() const {

  return true;
}

void MIMCPull::Swap(MIMCPull* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(resource_, other->resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MIMCPull::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MIMCPull_descriptor_;
  metadata.reflection = MIMCPull_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MIMCUser::kAppIdFieldNumber;
const int MIMCUser::kAppAccountFieldNumber;
const int MIMCUser::kUuidFieldNumber;
const int MIMCUser::kResourceFieldNumber;
#endif  // !_MSC_VER

MIMCUser::MIMCUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MIMCUser::InitAsDefaultInstance() {
}

MIMCUser::MIMCUser(const MIMCUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MIMCUser::SharedCtor() {
  _cached_size_ = 0;
  appid_ = GOOGLE_LONGLONG(0);
  appaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_ = GOOGLE_LONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MIMCUser::~MIMCUser() {
  SharedDtor();
}

void MIMCUser::SharedDtor() {
  if (appaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete appaccount_;
  }
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (this != default_instance_) {
  }
}

void MIMCUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MIMCUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MIMCUser_descriptor_;
}

const MIMCUser& MIMCUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto();
  return *default_instance_;
}

MIMCUser* MIMCUser::default_instance_ = NULL;

MIMCUser* MIMCUser::New() const {
  return new MIMCUser;
}

void MIMCUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = GOOGLE_LONGLONG(0);
    if (has_appaccount()) {
      if (appaccount_ != &::google::protobuf::internal::kEmptyString) {
        appaccount_->clear();
      }
    }
    uuid_ = GOOGLE_LONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MIMCUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 appId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appAccount;
        break;
      }

      // optional string appAccount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appaccount().data(), this->appaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resource;
        break;
      }

      // optional string resource = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MIMCUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 appId = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->appid(), output);
  }

  // optional string appAccount = 2;
  if (has_appaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appaccount().data(), this->appaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->appaccount(), output);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->uuid(), output);
  }

  // optional string resource = 4;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->resource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MIMCUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 appId = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->appid(), target);
  }

  // optional string appAccount = 2;
  if (has_appaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appaccount().data(), this->appaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appaccount(), target);
  }

  // optional int64 uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->uuid(), target);
  }

  // optional string resource = 4;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->resource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MIMCUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 appId = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->appid());
    }

    // optional string appAccount = 2;
    if (has_appaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appaccount());
    }

    // optional int64 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional string resource = 4;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MIMCUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MIMCUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MIMCUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MIMCUser::MergeFrom(const MIMCUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_appaccount()) {
      set_appaccount(from.appaccount());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MIMCUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MIMCUser::CopyFrom(const MIMCUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MIMCUser::IsInitialized() const {

  return true;
}

void MIMCUser::Swap(MIMCUser* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(appaccount_, other->appaccount_);
    std::swap(uuid_, other->uuid_);
    std::swap(resource_, other->resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MIMCUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MIMCUser_descriptor_;
  metadata.reflection = MIMCUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MIMCGroup::kAppIdFieldNumber;
const int MIMCGroup::kTopicIdFieldNumber;
#endif  // !_MSC_VER

MIMCGroup::MIMCGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MIMCGroup::InitAsDefaultInstance() {
}

MIMCGroup::MIMCGroup(const MIMCGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MIMCGroup::SharedCtor() {
  _cached_size_ = 0;
  appid_ = GOOGLE_LONGLONG(0);
  topicid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MIMCGroup::~MIMCGroup() {
  SharedDtor();
}

void MIMCGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MIMCGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MIMCGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MIMCGroup_descriptor_;
}

const MIMCGroup& MIMCGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messaging_2dprotobuf_2fxiaomi_2dmimc_2fsrc_2fmain_2fproto_2fmimc_2eproto();
  return *default_instance_;
}

MIMCGroup* MIMCGroup::default_instance_ = NULL;

MIMCGroup* MIMCGroup::New() const {
  return new MIMCGroup;
}

void MIMCGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = GOOGLE_LONGLONG(0);
    topicid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MIMCGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 appId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_topicId;
        break;
      }

      // optional int64 topicId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topicId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &topicid_)));
          set_has_topicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MIMCGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 appId = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->appid(), output);
  }

  // optional int64 topicId = 2;
  if (has_topicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->topicid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MIMCGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 appId = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->appid(), target);
  }

  // optional int64 topicId = 2;
  if (has_topicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->topicid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MIMCGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 appId = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->appid());
    }

    // optional int64 topicId = 2;
    if (has_topicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->topicid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MIMCGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MIMCGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MIMCGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MIMCGroup::MergeFrom(const MIMCGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_topicid()) {
      set_topicid(from.topicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MIMCGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MIMCGroup::CopyFrom(const MIMCGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MIMCGroup::IsInitialized() const {

  return true;
}

void MIMCGroup::Swap(MIMCGroup* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(topicid_, other->topicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MIMCGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MIMCGroup_descriptor_;
  metadata.reflection = MIMCGroup_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mimc

// @@protoc_insertion_point(global_scope)
