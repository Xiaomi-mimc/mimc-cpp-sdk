// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rts_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include <mimc/rts_data.pb.h>

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace mimc {

void protobuf_ShutdownFile_rts_5fdata_2eproto() {
  delete UserPacket::default_instance_;
  delete BindRelayRequest::default_instance_;
  delete BindRelayResponse::default_instance_;
  delete PingRelayRequest::default_instance_;
  delete PingRelayResponse::default_instance_;
  delete UnBindRelayRequest::default_instance_;
  delete UnBindRelayResponse::default_instance_;
  delete RelayKickRequest::default_instance_;
  delete RelayKickResponse::default_instance_;
  delete RouterPacket::default_instance_;
  delete BurrowPacket::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_rts_5fdata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_rts_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  UserPacket::default_instance_ = new UserPacket();
  BindRelayRequest::default_instance_ = new BindRelayRequest();
  BindRelayResponse::default_instance_ = new BindRelayResponse();
  PingRelayRequest::default_instance_ = new PingRelayRequest();
  PingRelayResponse::default_instance_ = new PingRelayResponse();
  UnBindRelayRequest::default_instance_ = new UnBindRelayRequest();
  UnBindRelayResponse::default_instance_ = new UnBindRelayResponse();
  RelayKickRequest::default_instance_ = new RelayKickRequest();
  RelayKickResponse::default_instance_ = new RelayKickResponse();
  RouterPacket::default_instance_ = new RouterPacket();
  BurrowPacket::default_instance_ = new BurrowPacket();
  UserPacket::default_instance_->InitAsDefaultInstance();
  BindRelayRequest::default_instance_->InitAsDefaultInstance();
  BindRelayResponse::default_instance_->InitAsDefaultInstance();
  PingRelayRequest::default_instance_->InitAsDefaultInstance();
  PingRelayResponse::default_instance_->InitAsDefaultInstance();
  UnBindRelayRequest::default_instance_->InitAsDefaultInstance();
  UnBindRelayResponse::default_instance_->InitAsDefaultInstance();
  RelayKickRequest::default_instance_->InitAsDefaultInstance();
  RelayKickResponse::default_instance_->InitAsDefaultInstance();
  RouterPacket::default_instance_->InitAsDefaultInstance();
  BurrowPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rts_5fdata_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_rts_5fdata_2eproto_once_);
void protobuf_AddDesc_rts_5fdata_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_rts_5fdata_2eproto_once_,
                 &protobuf_AddDesc_rts_5fdata_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rts_5fdata_2eproto {
  StaticDescriptorInitializer_rts_5fdata_2eproto() {
    protobuf_AddDesc_rts_5fdata_2eproto();
  }
} static_descriptor_initializer_rts_5fdata_2eproto_;
#endif
bool PKT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

bool KICK_REASON_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

bool STREAM_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool CHANNEL_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool BURROW_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UserPacket::kVersionFieldNumber;
const int UserPacket::kPktTypeFieldNumber;
const int UserPacket::kUuidFieldNumber;
const int UserPacket::kResourceFieldNumber;
const int UserPacket::kChatIdFieldNumber;
const int UserPacket::kPayloadFieldNumber;
const int UserPacket::kRegionBucketFieldNumber;
#endif  // !_MSC_VER

UserPacket::UserPacket()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserPacket::InitAsDefaultInstance() {
}

UserPacket::UserPacket(const UserPacket& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserPacket::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  pkt_type_ = 1;
  uuid_ = GOOGLE_ULONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_id_ = GOOGLE_ULONGLONG(0);
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  region_bucket_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserPacket::~UserPacket() {
  SharedDtor();
}

void UserPacket::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserPacket& UserPacket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rts_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rts_5fdata_2eproto();
#endif
  return *default_instance_;
}

UserPacket* UserPacket::default_instance_ = NULL;

UserPacket* UserPacket::New() const {
  return new UserPacket;
}

void UserPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    pkt_type_ = 1;
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    chat_id_ = GOOGLE_ULONGLONG(0);
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
    region_bucket_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pkt_type;
        break;
      }

      // required .mimc.PKT_TYPE pkt_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkt_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mimc::PKT_TYPE_IsValid(value)) {
            set_pkt_type(static_cast< ::mimc::PKT_TYPE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }

      // required uint64 uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resource;
        break;
      }

      // required string resource = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chat_id;
        break;
      }

      // optional uint64 chat_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
          set_has_chat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_payload;
        break;
      }

      // optional bytes payload = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_region_bucket;
        break;
      }

      // optional int64 region_bucket = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_bucket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &region_bucket_)));
          set_has_region_bucket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required .mimc.PKT_TYPE pkt_type = 2;
  if (has_pkt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pkt_type(), output);
  }

  // required uint64 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uuid(), output);
  }

  // required string resource = 4;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->resource(), output);
  }

  // optional uint64 chat_id = 5;
  if (has_chat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->chat_id(), output);
  }

  // optional bytes payload = 6;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->payload(), output);
  }

  // optional int64 region_bucket = 7;
  if (has_region_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->region_bucket(), output);
  }

}

int UserPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required .mimc.PKT_TYPE pkt_type = 2;
    if (has_pkt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pkt_type());
    }

    // required uint64 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // required string resource = 4;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional uint64 chat_id = 5;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

    // optional bytes payload = 6;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional int64 region_bucket = 7;
    if (has_region_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->region_bucket());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserPacket*>(&from));
}

void UserPacket::MergeFrom(const UserPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_pkt_type()) {
      set_pkt_type(from.pkt_type());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_chat_id()) {
      set_chat_id(from.chat_id());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_region_bucket()) {
      set_region_bucket(from.region_bucket());
    }
  }
}

void UserPacket::CopyFrom(const UserPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void UserPacket::Swap(UserPacket* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(pkt_type_, other->pkt_type_);
    std::swap(uuid_, other->uuid_);
    std::swap(resource_, other->resource_);
    std::swap(chat_id_, other->chat_id_);
    std::swap(payload_, other->payload_);
    std::swap(region_bucket_, other->region_bucket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserPacket::GetTypeName() const {
  return "mimc.UserPacket";
}


// ===================================================================

#ifndef _MSC_VER
const int BindRelayRequest::kUuidFieldNumber;
const int BindRelayRequest::kResourceFieldNumber;
const int BindRelayRequest::kIntranetIpFieldNumber;
const int BindRelayRequest::kIntranetPortFieldNumber;
const int BindRelayRequest::kTokenFieldNumber;
#endif  // !_MSC_VER

BindRelayRequest::BindRelayRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BindRelayRequest::InitAsDefaultInstance() {
}

BindRelayRequest::BindRelayRequest(const BindRelayRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BindRelayRequest::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  intranet_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  intranet_port_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BindRelayRequest::~BindRelayRequest() {
  SharedDtor();
}

void BindRelayRequest::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (intranet_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete intranet_ip_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BindRelayRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BindRelayRequest& BindRelayRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rts_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rts_5fdata_2eproto();
#endif
  return *default_instance_;
}

BindRelayRequest* BindRelayRequest::default_instance_ = NULL;

BindRelayRequest* BindRelayRequest::New() const {
  return new BindRelayRequest;
}

void BindRelayRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    if (has_intranet_ip()) {
      if (intranet_ip_ != &::google::protobuf::internal::kEmptyString) {
        intranet_ip_->clear();
      }
    }
    intranet_port_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BindRelayRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // required string resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_intranet_ip;
        break;
      }

      // optional string intranet_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intranet_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_intranet_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_intranet_port;
        break;
      }

      // optional int32 intranet_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intranet_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intranet_port_)));
          set_has_intranet_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_token;
        break;
      }

      // optional string token = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BindRelayRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // required string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resource(), output);
  }

  // optional string intranet_ip = 3;
  if (has_intranet_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->intranet_ip(), output);
  }

  // optional int32 intranet_port = 4;
  if (has_intranet_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->intranet_port(), output);
  }

  // optional string token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->token(), output);
  }

}

int BindRelayRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // required string resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional string intranet_ip = 3;
    if (has_intranet_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->intranet_ip());
    }

    // optional int32 intranet_port = 4;
    if (has_intranet_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intranet_port());
    }

    // optional string token = 5;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindRelayRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BindRelayRequest*>(&from));
}

void BindRelayRequest::MergeFrom(const BindRelayRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_intranet_ip()) {
      set_intranet_ip(from.intranet_ip());
    }
    if (from.has_intranet_port()) {
      set_intranet_port(from.intranet_port());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
}

void BindRelayRequest::CopyFrom(const BindRelayRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindRelayRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BindRelayRequest::Swap(BindRelayRequest* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(resource_, other->resource_);
    std::swap(intranet_ip_, other->intranet_ip_);
    std::swap(intranet_port_, other->intranet_port_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BindRelayRequest::GetTypeName() const {
  return "mimc.BindRelayRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int BindRelayResponse::kResultFieldNumber;
const int BindRelayResponse::kInternetIpFieldNumber;
const int BindRelayResponse::kInternetPortFieldNumber;
const int BindRelayResponse::kRelayIpFieldNumber;
const int BindRelayResponse::kRelayPortFieldNumber;
const int BindRelayResponse::kErrornoFieldNumber;
#endif  // !_MSC_VER

BindRelayResponse::BindRelayResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BindRelayResponse::InitAsDefaultInstance() {
}

BindRelayResponse::BindRelayResponse(const BindRelayResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BindRelayResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  internet_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  internet_port_ = 0;
  relay_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  relay_port_ = 0;
  errorno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BindRelayResponse::~BindRelayResponse() {
  SharedDtor();
}

void BindRelayResponse::SharedDtor() {
  if (internet_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete internet_ip_;
  }
  if (relay_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete relay_ip_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BindRelayResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BindRelayResponse& BindRelayResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rts_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rts_5fdata_2eproto();
#endif
  return *default_instance_;
}

BindRelayResponse* BindRelayResponse::default_instance_ = NULL;

BindRelayResponse* BindRelayResponse::New() const {
  return new BindRelayResponse;
}

void BindRelayResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    if (has_internet_ip()) {
      if (internet_ip_ != &::google::protobuf::internal::kEmptyString) {
        internet_ip_->clear();
      }
    }
    internet_port_ = 0;
    if (has_relay_ip()) {
      if (relay_ip_ != &::google::protobuf::internal::kEmptyString) {
        relay_ip_->clear();
      }
    }
    relay_port_ = 0;
    errorno_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BindRelayResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_internet_ip;
        break;
      }

      // required string internet_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internet_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internet_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_internet_port;
        break;
      }

      // required int32 internet_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_internet_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &internet_port_)));
          set_has_internet_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_relay_ip;
        break;
      }

      // optional string relay_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relay_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relay_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_relay_port;
        break;
      }

      // optional int32 relay_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relay_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relay_port_)));
          set_has_relay_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_errorno;
        break;
      }

      // optional uint32 errorno = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorno_)));
          set_has_errorno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BindRelayResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // required string internet_ip = 2;
  if (has_internet_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->internet_ip(), output);
  }

  // required int32 internet_port = 3;
  if (has_internet_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->internet_port(), output);
  }

  // optional string relay_ip = 4;
  if (has_relay_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->relay_ip(), output);
  }

  // optional int32 relay_port = 5;
  if (has_relay_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->relay_port(), output);
  }

  // optional uint32 errorno = 6;
  if (has_errorno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->errorno(), output);
  }

}

int BindRelayResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // required string internet_ip = 2;
    if (has_internet_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->internet_ip());
    }

    // required int32 internet_port = 3;
    if (has_internet_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->internet_port());
    }

    // optional string relay_ip = 4;
    if (has_relay_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relay_ip());
    }

    // optional int32 relay_port = 5;
    if (has_relay_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relay_port());
    }

    // optional uint32 errorno = 6;
    if (has_errorno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorno());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindRelayResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BindRelayResponse*>(&from));
}

void BindRelayResponse::MergeFrom(const BindRelayResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_internet_ip()) {
      set_internet_ip(from.internet_ip());
    }
    if (from.has_internet_port()) {
      set_internet_port(from.internet_port());
    }
    if (from.has_relay_ip()) {
      set_relay_ip(from.relay_ip());
    }
    if (from.has_relay_port()) {
      set_relay_port(from.relay_port());
    }
    if (from.has_errorno()) {
      set_errorno(from.errorno());
    }
  }
}

void BindRelayResponse::CopyFrom(const BindRelayResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindRelayResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BindRelayResponse::Swap(BindRelayResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(internet_ip_, other->internet_ip_);
    std::swap(internet_port_, other->internet_port_);
    std::swap(relay_ip_, other->relay_ip_);
    std::swap(relay_port_, other->relay_port_);
    std::swap(errorno_, other->errorno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BindRelayResponse::GetTypeName() const {
  return "mimc.BindRelayResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int PingRelayRequest::kUuidFieldNumber;
const int PingRelayRequest::kResourceFieldNumber;
#endif  // !_MSC_VER

PingRelayRequest::PingRelayRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PingRelayRequest::InitAsDefaultInstance() {
}

PingRelayRequest::PingRelayRequest(const PingRelayRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PingRelayRequest::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingRelayRequest::~PingRelayRequest() {
  SharedDtor();
}

void PingRelayRequest::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PingRelayRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PingRelayRequest& PingRelayRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rts_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rts_5fdata_2eproto();
#endif
  return *default_instance_;
}

PingRelayRequest* PingRelayRequest::default_instance_ = NULL;

PingRelayRequest* PingRelayRequest::New() const {
  return new PingRelayRequest;
}

void PingRelayRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PingRelayRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // required string resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PingRelayRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // required string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resource(), output);
  }

}

int PingRelayRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // required string resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingRelayRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PingRelayRequest*>(&from));
}

void PingRelayRequest::MergeFrom(const PingRelayRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
  }
}

void PingRelayRequest::CopyFrom(const PingRelayRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRelayRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PingRelayRequest::Swap(PingRelayRequest* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(resource_, other->resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PingRelayRequest::GetTypeName() const {
  return "mimc.PingRelayRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int PingRelayResponse::kResultFieldNumber;
const int PingRelayResponse::kInternetIpFieldNumber;
const int PingRelayResponse::kInternetPortFieldNumber;
const int PingRelayResponse::kErrornoFieldNumber;
#endif  // !_MSC_VER

PingRelayResponse::PingRelayResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PingRelayResponse::InitAsDefaultInstance() {
}

PingRelayResponse::PingRelayResponse(const PingRelayResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PingRelayResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  internet_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  internet_port_ = 0;
  errorno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingRelayResponse::~PingRelayResponse() {
  SharedDtor();
}

void PingRelayResponse::SharedDtor() {
  if (internet_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete internet_ip_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PingRelayResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PingRelayResponse& PingRelayResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rts_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rts_5fdata_2eproto();
#endif
  return *default_instance_;
}

PingRelayResponse* PingRelayResponse::default_instance_ = NULL;

PingRelayResponse* PingRelayResponse::New() const {
  return new PingRelayResponse;
}

void PingRelayResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    if (has_internet_ip()) {
      if (internet_ip_ != &::google::protobuf::internal::kEmptyString) {
        internet_ip_->clear();
      }
    }
    internet_port_ = 0;
    errorno_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PingRelayResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_internet_ip;
        break;
      }

      // required string internet_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internet_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internet_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_internet_port;
        break;
      }

      // required int32 internet_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_internet_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &internet_port_)));
          set_has_internet_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_errorno;
        break;
      }

      // optional uint32 errorno = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorno_)));
          set_has_errorno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PingRelayResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // required string internet_ip = 2;
  if (has_internet_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->internet_ip(), output);
  }

  // required int32 internet_port = 3;
  if (has_internet_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->internet_port(), output);
  }

  // optional uint32 errorno = 4;
  if (has_errorno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->errorno(), output);
  }

}

int PingRelayResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // required string internet_ip = 2;
    if (has_internet_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->internet_ip());
    }

    // required int32 internet_port = 3;
    if (has_internet_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->internet_port());
    }

    // optional uint32 errorno = 4;
    if (has_errorno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorno());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingRelayResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PingRelayResponse*>(&from));
}

void PingRelayResponse::MergeFrom(const PingRelayResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_internet_ip()) {
      set_internet_ip(from.internet_ip());
    }
    if (from.has_internet_port()) {
      set_internet_port(from.internet_port());
    }
    if (from.has_errorno()) {
      set_errorno(from.errorno());
    }
  }
}

void PingRelayResponse::CopyFrom(const PingRelayResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRelayResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PingRelayResponse::Swap(PingRelayResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(internet_ip_, other->internet_ip_);
    std::swap(internet_port_, other->internet_port_);
    std::swap(errorno_, other->errorno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PingRelayResponse::GetTypeName() const {
  return "mimc.PingRelayResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int UnBindRelayRequest::kUuidFieldNumber;
const int UnBindRelayRequest::kResourceFieldNumber;
const int UnBindRelayRequest::kTokenFieldNumber;
#endif  // !_MSC_VER

UnBindRelayRequest::UnBindRelayRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UnBindRelayRequest::InitAsDefaultInstance() {
}

UnBindRelayRequest::UnBindRelayRequest(const UnBindRelayRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UnBindRelayRequest::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnBindRelayRequest::~UnBindRelayRequest() {
  SharedDtor();
}

void UnBindRelayRequest::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UnBindRelayRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UnBindRelayRequest& UnBindRelayRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rts_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rts_5fdata_2eproto();
#endif
  return *default_instance_;
}

UnBindRelayRequest* UnBindRelayRequest::default_instance_ = NULL;

UnBindRelayRequest* UnBindRelayRequest::New() const {
  return new UnBindRelayRequest;
}

void UnBindRelayRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UnBindRelayRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // required string resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnBindRelayRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // required string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resource(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }

}

int UnBindRelayRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // required string resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnBindRelayRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnBindRelayRequest*>(&from));
}

void UnBindRelayRequest::MergeFrom(const UnBindRelayRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
}

void UnBindRelayRequest::CopyFrom(const UnBindRelayRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnBindRelayRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UnBindRelayRequest::Swap(UnBindRelayRequest* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(resource_, other->resource_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UnBindRelayRequest::GetTypeName() const {
  return "mimc.UnBindRelayRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int UnBindRelayResponse::kIsOkFieldNumber;
#endif  // !_MSC_VER

UnBindRelayResponse::UnBindRelayResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UnBindRelayResponse::InitAsDefaultInstance() {
}

UnBindRelayResponse::UnBindRelayResponse(const UnBindRelayResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UnBindRelayResponse::SharedCtor() {
  _cached_size_ = 0;
  is_ok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnBindRelayResponse::~UnBindRelayResponse() {
  SharedDtor();
}

void UnBindRelayResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UnBindRelayResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UnBindRelayResponse& UnBindRelayResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rts_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rts_5fdata_2eproto();
#endif
  return *default_instance_;
}

UnBindRelayResponse* UnBindRelayResponse::default_instance_ = NULL;

UnBindRelayResponse* UnBindRelayResponse::New() const {
  return new UnBindRelayResponse;
}

void UnBindRelayResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_ok_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UnBindRelayResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_ok = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ok_)));
          set_has_is_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnBindRelayResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_ok = 1;
  if (has_is_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_ok(), output);
  }

}

int UnBindRelayResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_ok = 1;
    if (has_is_ok()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnBindRelayResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnBindRelayResponse*>(&from));
}

void UnBindRelayResponse::MergeFrom(const UnBindRelayResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_ok()) {
      set_is_ok(from.is_ok());
    }
  }
}

void UnBindRelayResponse::CopyFrom(const UnBindRelayResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnBindRelayResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UnBindRelayResponse::Swap(UnBindRelayResponse* other) {
  if (other != this) {
    std::swap(is_ok_, other->is_ok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UnBindRelayResponse::GetTypeName() const {
  return "mimc.UnBindRelayResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RelayKickRequest::kReasonFieldNumber;
#endif  // !_MSC_VER

RelayKickRequest::RelayKickRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RelayKickRequest::InitAsDefaultInstance() {
}

RelayKickRequest::RelayKickRequest(const RelayKickRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RelayKickRequest::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelayKickRequest::~RelayKickRequest() {
  SharedDtor();
}

void RelayKickRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RelayKickRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RelayKickRequest& RelayKickRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rts_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rts_5fdata_2eproto();
#endif
  return *default_instance_;
}

RelayKickRequest* RelayKickRequest::default_instance_ = NULL;

RelayKickRequest* RelayKickRequest::New() const {
  return new RelayKickRequest;
}

void RelayKickRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RelayKickRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mimc.KICK_REASON reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mimc::KICK_REASON_IsValid(value)) {
            set_reason(static_cast< ::mimc::KICK_REASON >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RelayKickRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mimc.KICK_REASON reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

}

int RelayKickRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mimc.KICK_REASON reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelayKickRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RelayKickRequest*>(&from));
}

void RelayKickRequest::MergeFrom(const RelayKickRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
}

void RelayKickRequest::CopyFrom(const RelayKickRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelayKickRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RelayKickRequest::Swap(RelayKickRequest* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RelayKickRequest::GetTypeName() const {
  return "mimc.RelayKickRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int RelayKickResponse::kIsOkFieldNumber;
#endif  // !_MSC_VER

RelayKickResponse::RelayKickResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RelayKickResponse::InitAsDefaultInstance() {
}

RelayKickResponse::RelayKickResponse(const RelayKickResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RelayKickResponse::SharedCtor() {
  _cached_size_ = 0;
  is_ok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelayKickResponse::~RelayKickResponse() {
  SharedDtor();
}

void RelayKickResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RelayKickResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RelayKickResponse& RelayKickResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rts_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rts_5fdata_2eproto();
#endif
  return *default_instance_;
}

RelayKickResponse* RelayKickResponse::default_instance_ = NULL;

RelayKickResponse* RelayKickResponse::New() const {
  return new RelayKickResponse;
}

void RelayKickResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_ok_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RelayKickResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_ok = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ok_)));
          set_has_is_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RelayKickResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_ok = 1;
  if (has_is_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_ok(), output);
  }

}

int RelayKickResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_ok = 1;
    if (has_is_ok()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelayKickResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RelayKickResponse*>(&from));
}

void RelayKickResponse::MergeFrom(const RelayKickResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_ok()) {
      set_is_ok(from.is_ok());
    }
  }
}

void RelayKickResponse::CopyFrom(const RelayKickResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelayKickResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RelayKickResponse::Swap(RelayKickResponse* other) {
  if (other != this) {
    std::swap(is_ok_, other->is_ok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RelayKickResponse::GetTypeName() const {
  return "mimc.RelayKickResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int RouterPacket::kChatIdFieldNumber;
const int RouterPacket::kFromUuidFieldNumber;
const int RouterPacket::kFromResourceFieldNumber;
const int RouterPacket::kToUuidFieldNumber;
const int RouterPacket::kToResourceFieldNumber;
const int RouterPacket::kToConnIdFieldNumber;
const int RouterPacket::kStreamTypeFieldNumber;
const int RouterPacket::kPayloadFieldNumber;
const int RouterPacket::kRegionBucketFieldNumber;
#endif  // !_MSC_VER

RouterPacket::RouterPacket()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RouterPacket::InitAsDefaultInstance() {
}

RouterPacket::RouterPacket(const RouterPacket& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RouterPacket::SharedCtor() {
  _cached_size_ = 0;
  chat_id_ = GOOGLE_ULONGLONG(0);
  from_uuid_ = GOOGLE_ULONGLONG(0);
  from_resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_uuid_ = GOOGLE_ULONGLONG(0);
  to_resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_conn_id_ = GOOGLE_ULONGLONG(0);
  stream_type_ = 1;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  region_bucket_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouterPacket::~RouterPacket() {
  SharedDtor();
}

void RouterPacket::SharedDtor() {
  if (from_resource_ != &::google::protobuf::internal::kEmptyString) {
    delete from_resource_;
  }
  if (to_resource_ != &::google::protobuf::internal::kEmptyString) {
    delete to_resource_;
  }
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RouterPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RouterPacket& RouterPacket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rts_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rts_5fdata_2eproto();
#endif
  return *default_instance_;
}

RouterPacket* RouterPacket::default_instance_ = NULL;

RouterPacket* RouterPacket::New() const {
  return new RouterPacket;
}

void RouterPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chat_id_ = GOOGLE_ULONGLONG(0);
    from_uuid_ = GOOGLE_ULONGLONG(0);
    if (has_from_resource()) {
      if (from_resource_ != &::google::protobuf::internal::kEmptyString) {
        from_resource_->clear();
      }
    }
    to_uuid_ = GOOGLE_ULONGLONG(0);
    if (has_to_resource()) {
      if (to_resource_ != &::google::protobuf::internal::kEmptyString) {
        to_resource_->clear();
      }
    }
    to_conn_id_ = GOOGLE_ULONGLONG(0);
    stream_type_ = 1;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    region_bucket_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RouterPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 chat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
          set_has_chat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from_uuid;
        break;
      }

      // optional uint64 from_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_uuid_)));
          set_has_from_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_from_resource;
        break;
      }

      // optional string from_resource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_to_uuid;
        break;
      }

      // optional uint64 to_uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_uuid_)));
          set_has_to_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_to_resource;
        break;
      }

      // optional string to_resource = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_to_conn_id;
        break;
      }

      // optional uint64 to_conn_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_conn_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_conn_id_)));
          set_has_to_conn_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_stream_type;
        break;
      }

      // optional .mimc.STREAM_TYPE stream_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stream_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mimc::STREAM_TYPE_IsValid(value)) {
            set_stream_type(static_cast< ::mimc::STREAM_TYPE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_payload;
        break;
      }

      // optional bytes payload = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_region_bucket;
        break;
      }

      // optional int64 region_bucket = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_bucket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &region_bucket_)));
          set_has_region_bucket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RouterPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 chat_id = 1;
  if (has_chat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chat_id(), output);
  }

  // optional uint64 from_uuid = 2;
  if (has_from_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->from_uuid(), output);
  }

  // optional string from_resource = 3;
  if (has_from_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->from_resource(), output);
  }

  // optional uint64 to_uuid = 4;
  if (has_to_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->to_uuid(), output);
  }

  // optional string to_resource = 5;
  if (has_to_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->to_resource(), output);
  }

  // optional uint64 to_conn_id = 6;
  if (has_to_conn_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->to_conn_id(), output);
  }

  // optional .mimc.STREAM_TYPE stream_type = 7;
  if (has_stream_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->stream_type(), output);
  }

  // optional bytes payload = 8;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->payload(), output);
  }

  // optional int64 region_bucket = 9;
  if (has_region_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->region_bucket(), output);
  }

}

int RouterPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 chat_id = 1;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

    // optional uint64 from_uuid = 2;
    if (has_from_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_uuid());
    }

    // optional string from_resource = 3;
    if (has_from_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_resource());
    }

    // optional uint64 to_uuid = 4;
    if (has_to_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_uuid());
    }

    // optional string to_resource = 5;
    if (has_to_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_resource());
    }

    // optional uint64 to_conn_id = 6;
    if (has_to_conn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_conn_id());
    }

    // optional .mimc.STREAM_TYPE stream_type = 7;
    if (has_stream_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stream_type());
    }

    // optional bytes payload = 8;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 region_bucket = 9;
    if (has_region_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->region_bucket());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouterPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RouterPacket*>(&from));
}

void RouterPacket::MergeFrom(const RouterPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_id()) {
      set_chat_id(from.chat_id());
    }
    if (from.has_from_uuid()) {
      set_from_uuid(from.from_uuid());
    }
    if (from.has_from_resource()) {
      set_from_resource(from.from_resource());
    }
    if (from.has_to_uuid()) {
      set_to_uuid(from.to_uuid());
    }
    if (from.has_to_resource()) {
      set_to_resource(from.to_resource());
    }
    if (from.has_to_conn_id()) {
      set_to_conn_id(from.to_conn_id());
    }
    if (from.has_stream_type()) {
      set_stream_type(from.stream_type());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_region_bucket()) {
      set_region_bucket(from.region_bucket());
    }
  }
}

void RouterPacket::CopyFrom(const RouterPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RouterPacket::Swap(RouterPacket* other) {
  if (other != this) {
    std::swap(chat_id_, other->chat_id_);
    std::swap(from_uuid_, other->from_uuid_);
    std::swap(from_resource_, other->from_resource_);
    std::swap(to_uuid_, other->to_uuid_);
    std::swap(to_resource_, other->to_resource_);
    std::swap(to_conn_id_, other->to_conn_id_);
    std::swap(stream_type_, other->stream_type_);
    std::swap(payload_, other->payload_);
    std::swap(region_bucket_, other->region_bucket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RouterPacket::GetTypeName() const {
  return "mimc.RouterPacket";
}


// ===================================================================

#ifndef _MSC_VER
const int BurrowPacket::kUuidFieldNumber;
const int BurrowPacket::kResourceFieldNumber;
const int BurrowPacket::kChatIdFieldNumber;
const int BurrowPacket::kBurrowIdFieldNumber;
const int BurrowPacket::kBurrowTypeFieldNumber;
#endif  // !_MSC_VER

BurrowPacket::BurrowPacket()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BurrowPacket::InitAsDefaultInstance() {
}

BurrowPacket::BurrowPacket(const BurrowPacket& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BurrowPacket::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_id_ = GOOGLE_ULONGLONG(0);
  burrow_id_ = GOOGLE_ULONGLONG(0);
  burrow_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BurrowPacket::~BurrowPacket() {
  SharedDtor();
}

void BurrowPacket::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BurrowPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BurrowPacket& BurrowPacket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rts_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rts_5fdata_2eproto();
#endif
  return *default_instance_;
}

BurrowPacket* BurrowPacket::default_instance_ = NULL;

BurrowPacket* BurrowPacket::New() const {
  return new BurrowPacket;
}

void BurrowPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    chat_id_ = GOOGLE_ULONGLONG(0);
    burrow_id_ = GOOGLE_ULONGLONG(0);
    burrow_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BurrowPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // required string resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chat_id;
        break;
      }

      // required uint64 chat_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chat_id_)));
          set_has_chat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_burrow_id;
        break;
      }

      // required uint64 burrow_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_burrow_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &burrow_id_)));
          set_has_burrow_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_burrow_type;
        break;
      }

      // required .mimc.BURROW_TYPE burrow_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_burrow_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mimc::BURROW_TYPE_IsValid(value)) {
            set_burrow_type(static_cast< ::mimc::BURROW_TYPE >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BurrowPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // required string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resource(), output);
  }

  // required uint64 chat_id = 3;
  if (has_chat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->chat_id(), output);
  }

  // required uint64 burrow_id = 4;
  if (has_burrow_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->burrow_id(), output);
  }

  // required .mimc.BURROW_TYPE burrow_type = 5;
  if (has_burrow_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->burrow_type(), output);
  }

}

int BurrowPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // required string resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // required uint64 chat_id = 3;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chat_id());
    }

    // required uint64 burrow_id = 4;
    if (has_burrow_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->burrow_id());
    }

    // required .mimc.BURROW_TYPE burrow_type = 5;
    if (has_burrow_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->burrow_type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BurrowPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BurrowPacket*>(&from));
}

void BurrowPacket::MergeFrom(const BurrowPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_chat_id()) {
      set_chat_id(from.chat_id());
    }
    if (from.has_burrow_id()) {
      set_burrow_id(from.burrow_id());
    }
    if (from.has_burrow_type()) {
      set_burrow_type(from.burrow_type());
    }
  }
}

void BurrowPacket::CopyFrom(const BurrowPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BurrowPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void BurrowPacket::Swap(BurrowPacket* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(resource_, other->resource_);
    std::swap(chat_id_, other->chat_id_);
    std::swap(burrow_id_, other->burrow_id_);
    std::swap(burrow_type_, other->burrow_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BurrowPacket::GetTypeName() const {
  return "mimc.BurrowPacket";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mimc

// @@protoc_insertion_point(global_scope)
