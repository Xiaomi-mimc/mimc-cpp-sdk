// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ims_push_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include <mimc/ims_push_service.pb.h>

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace ims {

void protobuf_ShutdownFile_ims_5fpush_5fservice_2eproto() {
  delete ClientHeader::default_instance_;
  delete XMMsgConn::default_instance_;
  delete XMMsgConnResp::default_instance_;
  delete XMMsgBind::default_instance_;
  delete XMMsgBindResp::default_instance_;
  delete XMMsgPing::default_instance_;
  delete XMMsgNotify::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ims_5fpush_5fservice_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ims_5fpush_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protocol::protobuf_AddDesc_control_5fmessage_2eproto();
  ClientHeader::default_instance_ = new ClientHeader();
  XMMsgConn::default_instance_ = new XMMsgConn();
  XMMsgConnResp::default_instance_ = new XMMsgConnResp();
  XMMsgBind::default_instance_ = new XMMsgBind();
  XMMsgBindResp::default_instance_ = new XMMsgBindResp();
  XMMsgPing::default_instance_ = new XMMsgPing();
  XMMsgNotify::default_instance_ = new XMMsgNotify();
  ClientHeader::default_instance_->InitAsDefaultInstance();
  XMMsgConn::default_instance_->InitAsDefaultInstance();
  XMMsgConnResp::default_instance_->InitAsDefaultInstance();
  XMMsgBind::default_instance_->InitAsDefaultInstance();
  XMMsgBindResp::default_instance_->InitAsDefaultInstance();
  XMMsgPing::default_instance_->InitAsDefaultInstance();
  XMMsgNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ims_5fpush_5fservice_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ims_5fpush_5fservice_2eproto_once_);
void protobuf_AddDesc_ims_5fpush_5fservice_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ims_5fpush_5fservice_2eproto_once_,
                 &protobuf_AddDesc_ims_5fpush_5fservice_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ims_5fpush_5fservice_2eproto {
  StaticDescriptorInitializer_ims_5fpush_5fservice_2eproto() {
    protobuf_AddDesc_ims_5fpush_5fservice_2eproto();
  }
} static_descriptor_initializer_ims_5fpush_5fservice_2eproto_;
#endif

// ===================================================================

bool ClientHeader_MSG_DIR_FLAG_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientHeader_MSG_DIR_FLAG ClientHeader::CS_ONEWAY;
const ClientHeader_MSG_DIR_FLAG ClientHeader::CS_REQ;
const ClientHeader_MSG_DIR_FLAG ClientHeader::CS_RESP;
const ClientHeader_MSG_DIR_FLAG ClientHeader::SC_ONEWAY;
const ClientHeader_MSG_DIR_FLAG ClientHeader::SC_REQ;
const ClientHeader_MSG_DIR_FLAG ClientHeader::SC_RESP;
const ClientHeader_MSG_DIR_FLAG ClientHeader::MSG_DIR_FLAG_MIN;
const ClientHeader_MSG_DIR_FLAG ClientHeader::MSG_DIR_FLAG_MAX;
const int ClientHeader::MSG_DIR_FLAG_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientHeader::kChidFieldNumber;
const int ClientHeader::kUuidFieldNumber;
const int ClientHeader::kServerFieldNumber;
const int ClientHeader::kResourceFieldNumber;
const int ClientHeader::kCmdFieldNumber;
const int ClientHeader::kSubcmdFieldNumber;
const int ClientHeader::kIdFieldNumber;
const int ClientHeader::kDirFlagFieldNumber;
const int ClientHeader::kCipherFieldNumber;
const int ClientHeader::kErrCodeFieldNumber;
const int ClientHeader::kErrStrFieldNumber;
#endif  // !_MSC_VER

ClientHeader::ClientHeader()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClientHeader::InitAsDefaultInstance() {
}

ClientHeader::ClientHeader(const ClientHeader& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClientHeader::SharedCtor() {
  _cached_size_ = 0;
  chid_ = 0;
  uuid_ = GOOGLE_LONGLONG(0);
  server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subcmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dir_flag_ = 1;
  cipher_ = 0;
  err_code_ = 0;
  err_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientHeader::~ClientHeader() {
  SharedDtor();
}

void ClientHeader::SharedDtor() {
  if (server_ != &::google::protobuf::internal::kEmptyString) {
    delete server_;
  }
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (subcmd_ != &::google::protobuf::internal::kEmptyString) {
    delete subcmd_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (err_str_ != &::google::protobuf::internal::kEmptyString) {
    delete err_str_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientHeader& ClientHeader::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ims_5fpush_5fservice_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ims_5fpush_5fservice_2eproto();
#endif
  return *default_instance_;
}

ClientHeader* ClientHeader::default_instance_ = NULL;

ClientHeader* ClientHeader::New() const {
  return new ClientHeader;
}

void ClientHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chid_ = 0;
    uuid_ = GOOGLE_LONGLONG(0);
    if (has_server()) {
      if (server_ != &::google::protobuf::internal::kEmptyString) {
        server_->clear();
      }
    }
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
    if (has_subcmd()) {
      if (subcmd_ != &::google::protobuf::internal::kEmptyString) {
        subcmd_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    dir_flag_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cipher_ = 0;
    err_code_ = 0;
    if (has_err_str()) {
      if (err_str_ != &::google::protobuf::internal::kEmptyString) {
        err_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ClientHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chid_)));
          set_has_chid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional int64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server;
        break;
      }

      // optional string server = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resource;
        break;
      }

      // optional string resource = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cmd;
        break;
      }

      // optional string cmd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_subcmd;
        break;
      }

      // optional string subcmd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subcmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subcmd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_id;
        break;
      }

      // optional string id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dir_flag;
        break;
      }

      // optional .ims.ClientHeader.MSG_DIR_FLAG dir_flag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dir_flag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ims::ClientHeader_MSG_DIR_FLAG_IsValid(value)) {
            set_dir_flag(static_cast< ::ims::ClientHeader_MSG_DIR_FLAG >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cipher;
        break;
      }

      // optional int32 cipher = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cipher:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cipher_)));
          set_has_cipher();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_err_code;
        break;
      }

      // optional int32 err_code = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_code_)));
          set_has_err_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_err_str;
        break;
      }

      // optional string err_str = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chid = 1;
  if (has_chid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chid(), output);
  }

  // optional int64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uuid(), output);
  }

  // optional string server = 3;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server(), output);
  }

  // optional string resource = 4;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->resource(), output);
  }

  // optional string cmd = 5;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cmd(), output);
  }

  // optional string subcmd = 6;
  if (has_subcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->subcmd(), output);
  }

  // optional string id = 7;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->id(), output);
  }

  // optional .ims.ClientHeader.MSG_DIR_FLAG dir_flag = 8;
  if (has_dir_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->dir_flag(), output);
  }

  // optional int32 cipher = 9;
  if (has_cipher()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cipher(), output);
  }

  // optional int32 err_code = 10;
  if (has_err_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->err_code(), output);
  }

  // optional string err_str = 11;
  if (has_err_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->err_str(), output);
  }

}

int ClientHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chid = 1;
    if (has_chid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chid());
    }

    // optional int64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uuid());
    }

    // optional string server = 3;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server());
    }

    // optional string resource = 4;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional string cmd = 5;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }

    // optional string subcmd = 6;
    if (has_subcmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subcmd());
    }

    // optional string id = 7;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .ims.ClientHeader.MSG_DIR_FLAG dir_flag = 8;
    if (has_dir_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dir_flag());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cipher = 9;
    if (has_cipher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cipher());
    }

    // optional int32 err_code = 10;
    if (has_err_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_code());
    }

    // optional string err_str = 11;
    if (has_err_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err_str());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientHeader*>(&from));
}

void ClientHeader::MergeFrom(const ClientHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chid()) {
      set_chid(from.chid());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_server()) {
      set_server(from.server());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_subcmd()) {
      set_subcmd(from.subcmd());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_dir_flag()) {
      set_dir_flag(from.dir_flag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cipher()) {
      set_cipher(from.cipher());
    }
    if (from.has_err_code()) {
      set_err_code(from.err_code());
    }
    if (from.has_err_str()) {
      set_err_str(from.err_str());
    }
  }
}

void ClientHeader::CopyFrom(const ClientHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientHeader::IsInitialized() const {

  return true;
}

void ClientHeader::Swap(ClientHeader* other) {
  if (other != this) {
    std::swap(chid_, other->chid_);
    std::swap(uuid_, other->uuid_);
    std::swap(server_, other->server_);
    std::swap(resource_, other->resource_);
    std::swap(cmd_, other->cmd_);
    std::swap(subcmd_, other->subcmd_);
    std::swap(id_, other->id_);
    std::swap(dir_flag_, other->dir_flag_);
    std::swap(cipher_, other->cipher_);
    std::swap(err_code_, other->err_code_);
    std::swap(err_str_, other->err_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientHeader::GetTypeName() const {
  return "ims.ClientHeader";
}


// ===================================================================

#ifndef _MSC_VER
const int XMMsgConn::kVersionFieldNumber;
const int XMMsgConn::kModelFieldNumber;
const int XMMsgConn::kOsFieldNumber;
const int XMMsgConn::kUdidFieldNumber;
const int XMMsgConn::kSdkFieldNumber;
const int XMMsgConn::kConnptFieldNumber;
const int XMMsgConn::kHostFieldNumber;
const int XMMsgConn::kLocaleFieldNumber;
const int XMMsgConn::kPscFieldNumber;
const int XMMsgConn::kAndverFieldNumber;
#endif  // !_MSC_VER

XMMsgConn::XMMsgConn()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void XMMsgConn::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  psc_ = const_cast< ::protocol::PushServiceConfigMsg*>(
      ::protocol::PushServiceConfigMsg::internal_default_instance());
#else
  psc_ = const_cast< ::protocol::PushServiceConfigMsg*>(&::protocol::PushServiceConfigMsg::default_instance());
#endif
}

XMMsgConn::XMMsgConn(const XMMsgConn& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void XMMsgConn::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  udid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sdk_ = 0;
  connpt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  locale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  psc_ = NULL;
  andver_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XMMsgConn::~XMMsgConn() {
  SharedDtor();
}

void XMMsgConn::SharedDtor() {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (udid_ != &::google::protobuf::internal::kEmptyString) {
    delete udid_;
  }
  if (connpt_ != &::google::protobuf::internal::kEmptyString) {
    delete connpt_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (locale_ != &::google::protobuf::internal::kEmptyString) {
    delete locale_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete psc_;
  }
}

void XMMsgConn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const XMMsgConn& XMMsgConn::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ims_5fpush_5fservice_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ims_5fpush_5fservice_2eproto();
#endif
  return *default_instance_;
}

XMMsgConn* XMMsgConn::default_instance_ = NULL;

XMMsgConn* XMMsgConn::New() const {
  return new XMMsgConn;
}

void XMMsgConn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::kEmptyString) {
        model_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
    if (has_udid()) {
      if (udid_ != &::google::protobuf::internal::kEmptyString) {
        udid_->clear();
      }
    }
    sdk_ = 0;
    if (has_connpt()) {
      if (connpt_ != &::google::protobuf::internal::kEmptyString) {
        connpt_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    if (has_locale()) {
      if (locale_ != &::google::protobuf::internal::kEmptyString) {
        locale_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_psc()) {
      if (psc_ != NULL) psc_->::protocol::PushServiceConfigMsg::Clear();
    }
    andver_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool XMMsgConn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_model;
        break;
      }

      // optional string model = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_os;
        break;
      }

      // optional string os = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_udid;
        break;
      }

      // optional string udid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_udid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sdk;
        break;
      }

      // optional int32 sdk = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sdk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sdk_)));
          set_has_sdk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_connpt;
        break;
      }

      // optional string connpt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connpt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connpt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_host;
        break;
      }

      // optional string host = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_locale;
        break;
      }

      // optional string locale = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_psc;
        break;
      }

      // optional .protocol.PushServiceConfigMsg psc = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_psc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_andver;
        break;
      }

      // optional int32 andver = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_andver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &andver_)));
          set_has_andver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XMMsgConn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional string model = 2;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->model(), output);
  }

  // optional string os = 3;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->os(), output);
  }

  // optional string udid = 4;
  if (has_udid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->udid(), output);
  }

  // optional int32 sdk = 5;
  if (has_sdk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sdk(), output);
  }

  // optional string connpt = 6;
  if (has_connpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->connpt(), output);
  }

  // optional string host = 7;
  if (has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->host(), output);
  }

  // optional string locale = 8;
  if (has_locale()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->locale(), output);
  }

  // optional .protocol.PushServiceConfigMsg psc = 9;
  if (has_psc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->psc(), output);
  }

  // optional int32 andver = 10;
  if (has_andver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->andver(), output);
  }

}

int XMMsgConn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional string model = 2;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string os = 3;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string udid = 4;
    if (has_udid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->udid());
    }

    // optional int32 sdk = 5;
    if (has_sdk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sdk());
    }

    // optional string connpt = 6;
    if (has_connpt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connpt());
    }

    // optional string host = 7;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional string locale = 8;
    if (has_locale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locale());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .protocol.PushServiceConfigMsg psc = 9;
    if (has_psc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->psc());
    }

    // optional int32 andver = 10;
    if (has_andver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->andver());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XMMsgConn::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const XMMsgConn*>(&from));
}

void XMMsgConn::MergeFrom(const XMMsgConn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_udid()) {
      set_udid(from.udid());
    }
    if (from.has_sdk()) {
      set_sdk(from.sdk());
    }
    if (from.has_connpt()) {
      set_connpt(from.connpt());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_locale()) {
      set_locale(from.locale());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_psc()) {
      mutable_psc()->::protocol::PushServiceConfigMsg::MergeFrom(from.psc());
    }
    if (from.has_andver()) {
      set_andver(from.andver());
    }
  }
}

void XMMsgConn::CopyFrom(const XMMsgConn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XMMsgConn::IsInitialized() const {

  return true;
}

void XMMsgConn::Swap(XMMsgConn* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(model_, other->model_);
    std::swap(os_, other->os_);
    std::swap(udid_, other->udid_);
    std::swap(sdk_, other->sdk_);
    std::swap(connpt_, other->connpt_);
    std::swap(host_, other->host_);
    std::swap(locale_, other->locale_);
    std::swap(psc_, other->psc_);
    std::swap(andver_, other->andver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string XMMsgConn::GetTypeName() const {
  return "ims.XMMsgConn";
}


// ===================================================================

#ifndef _MSC_VER
const int XMMsgConnResp::kChallengeFieldNumber;
const int XMMsgConnResp::kHostFieldNumber;
const int XMMsgConnResp::kPscFieldNumber;
#endif  // !_MSC_VER

XMMsgConnResp::XMMsgConnResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void XMMsgConnResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  psc_ = const_cast< ::protocol::PushServiceConfigMsg*>(
      ::protocol::PushServiceConfigMsg::internal_default_instance());
#else
  psc_ = const_cast< ::protocol::PushServiceConfigMsg*>(&::protocol::PushServiceConfigMsg::default_instance());
#endif
}

XMMsgConnResp::XMMsgConnResp(const XMMsgConnResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void XMMsgConnResp::SharedCtor() {
  _cached_size_ = 0;
  challenge_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  psc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XMMsgConnResp::~XMMsgConnResp() {
  SharedDtor();
}

void XMMsgConnResp::SharedDtor() {
  if (challenge_ != &::google::protobuf::internal::kEmptyString) {
    delete challenge_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete psc_;
  }
}

void XMMsgConnResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const XMMsgConnResp& XMMsgConnResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ims_5fpush_5fservice_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ims_5fpush_5fservice_2eproto();
#endif
  return *default_instance_;
}

XMMsgConnResp* XMMsgConnResp::default_instance_ = NULL;

XMMsgConnResp* XMMsgConnResp::New() const {
  return new XMMsgConnResp;
}

void XMMsgConnResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_challenge()) {
      if (challenge_ != &::google::protobuf::internal::kEmptyString) {
        challenge_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    if (has_psc()) {
      if (psc_ != NULL) psc_->::protocol::PushServiceConfigMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool XMMsgConnResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string challenge = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_challenge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_host;
        break;
      }

      // optional string host = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_psc;
        break;
      }

      // optional .protocol.PushServiceConfigMsg psc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_psc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XMMsgConnResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string challenge = 1;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->challenge(), output);
  }

  // optional string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->host(), output);
  }

  // optional .protocol.PushServiceConfigMsg psc = 3;
  if (has_psc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->psc(), output);
  }

}

int XMMsgConnResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string challenge = 1;
    if (has_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->challenge());
    }

    // optional string host = 2;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional .protocol.PushServiceConfigMsg psc = 3;
    if (has_psc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->psc());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XMMsgConnResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const XMMsgConnResp*>(&from));
}

void XMMsgConnResp::MergeFrom(const XMMsgConnResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challenge()) {
      set_challenge(from.challenge());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_psc()) {
      mutable_psc()->::protocol::PushServiceConfigMsg::MergeFrom(from.psc());
    }
  }
}

void XMMsgConnResp::CopyFrom(const XMMsgConnResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XMMsgConnResp::IsInitialized() const {

  return true;
}

void XMMsgConnResp::Swap(XMMsgConnResp* other) {
  if (other != this) {
    std::swap(challenge_, other->challenge_);
    std::swap(host_, other->host_);
    std::swap(psc_, other->psc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string XMMsgConnResp::GetTypeName() const {
  return "ims.XMMsgConnResp";
}


// ===================================================================

#ifndef _MSC_VER
const int XMMsgBind::kTokenFieldNumber;
const int XMMsgBind::kKickFieldNumber;
const int XMMsgBind::kMethodFieldNumber;
const int XMMsgBind::kClientAttrsFieldNumber;
const int XMMsgBind::kCloudAttrsFieldNumber;
const int XMMsgBind::kSigFieldNumber;
#endif  // !_MSC_VER

XMMsgBind::XMMsgBind()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void XMMsgBind::InitAsDefaultInstance() {
}

XMMsgBind::XMMsgBind(const XMMsgBind& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void XMMsgBind::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_attrs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cloud_attrs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XMMsgBind::~XMMsgBind() {
  SharedDtor();
}

void XMMsgBind::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (kick_ != &::google::protobuf::internal::kEmptyString) {
    delete kick_;
  }
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (client_attrs_ != &::google::protobuf::internal::kEmptyString) {
    delete client_attrs_;
  }
  if (cloud_attrs_ != &::google::protobuf::internal::kEmptyString) {
    delete cloud_attrs_;
  }
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void XMMsgBind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const XMMsgBind& XMMsgBind::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ims_5fpush_5fservice_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ims_5fpush_5fservice_2eproto();
#endif
  return *default_instance_;
}

XMMsgBind* XMMsgBind::default_instance_ = NULL;

XMMsgBind* XMMsgBind::New() const {
  return new XMMsgBind;
}

void XMMsgBind::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_kick()) {
      if (kick_ != &::google::protobuf::internal::kEmptyString) {
        kick_->clear();
      }
    }
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::kEmptyString) {
        method_->clear();
      }
    }
    if (has_client_attrs()) {
      if (client_attrs_ != &::google::protobuf::internal::kEmptyString) {
        client_attrs_->clear();
      }
    }
    if (has_cloud_attrs()) {
      if (cloud_attrs_ != &::google::protobuf::internal::kEmptyString) {
        cloud_attrs_->clear();
      }
    }
    if (has_sig()) {
      if (sig_ != &::google::protobuf::internal::kEmptyString) {
        sig_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool XMMsgBind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kick;
        break;
      }

      // optional string kick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_method;
        break;
      }

      // optional string method = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_client_attrs;
        break;
      }

      // optional string client_attrs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cloud_attrs;
        break;
      }

      // optional string cloud_attrs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cloud_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cloud_attrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sig;
        break;
      }

      // optional string sig = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XMMsgBind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }

  // optional string kick = 2;
  if (has_kick()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->kick(), output);
  }

  // optional string method = 3;
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->method(), output);
  }

  // optional string client_attrs = 4;
  if (has_client_attrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->client_attrs(), output);
  }

  // optional string cloud_attrs = 5;
  if (has_cloud_attrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cloud_attrs(), output);
  }

  // optional string sig = 6;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sig(), output);
  }

}

int XMMsgBind::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string kick = 2;
    if (has_kick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kick());
    }

    // optional string method = 3;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }

    // optional string client_attrs = 4;
    if (has_client_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_attrs());
    }

    // optional string cloud_attrs = 5;
    if (has_cloud_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cloud_attrs());
    }

    // optional string sig = 6;
    if (has_sig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sig());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XMMsgBind::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const XMMsgBind*>(&from));
}

void XMMsgBind::MergeFrom(const XMMsgBind& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_kick()) {
      set_kick(from.kick());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_client_attrs()) {
      set_client_attrs(from.client_attrs());
    }
    if (from.has_cloud_attrs()) {
      set_cloud_attrs(from.cloud_attrs());
    }
    if (from.has_sig()) {
      set_sig(from.sig());
    }
  }
}

void XMMsgBind::CopyFrom(const XMMsgBind& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XMMsgBind::IsInitialized() const {

  return true;
}

void XMMsgBind::Swap(XMMsgBind* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(kick_, other->kick_);
    std::swap(method_, other->method_);
    std::swap(client_attrs_, other->client_attrs_);
    std::swap(cloud_attrs_, other->cloud_attrs_);
    std::swap(sig_, other->sig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string XMMsgBind::GetTypeName() const {
  return "ims.XMMsgBind";
}


// ===================================================================

#ifndef _MSC_VER
const int XMMsgBindResp::kResultFieldNumber;
const int XMMsgBindResp::kErrorTypeFieldNumber;
const int XMMsgBindResp::kErrorReasonFieldNumber;
const int XMMsgBindResp::kErrorDescFieldNumber;
#endif  // !_MSC_VER

XMMsgBindResp::XMMsgBindResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void XMMsgBindResp::InitAsDefaultInstance() {
}

XMMsgBindResp::XMMsgBindResp(const XMMsgBindResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void XMMsgBindResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  error_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XMMsgBindResp::~XMMsgBindResp() {
  SharedDtor();
}

void XMMsgBindResp::SharedDtor() {
  if (error_type_ != &::google::protobuf::internal::kEmptyString) {
    delete error_type_;
  }
  if (error_reason_ != &::google::protobuf::internal::kEmptyString) {
    delete error_reason_;
  }
  if (error_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete error_desc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void XMMsgBindResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const XMMsgBindResp& XMMsgBindResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ims_5fpush_5fservice_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ims_5fpush_5fservice_2eproto();
#endif
  return *default_instance_;
}

XMMsgBindResp* XMMsgBindResp::default_instance_ = NULL;

XMMsgBindResp* XMMsgBindResp::New() const {
  return new XMMsgBindResp;
}

void XMMsgBindResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    if (has_error_type()) {
      if (error_type_ != &::google::protobuf::internal::kEmptyString) {
        error_type_->clear();
      }
    }
    if (has_error_reason()) {
      if (error_reason_ != &::google::protobuf::internal::kEmptyString) {
        error_reason_->clear();
      }
    }
    if (has_error_desc()) {
      if (error_desc_ != &::google::protobuf::internal::kEmptyString) {
        error_desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool XMMsgBindResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error_type;
        break;
      }

      // optional string error_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_error_reason;
        break;
      }

      // optional string error_reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_reason()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_error_desc;
        break;
      }

      // optional string error_desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XMMsgBindResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional string error_type = 2;
  if (has_error_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error_type(), output);
  }

  // optional string error_reason = 3;
  if (has_error_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->error_reason(), output);
  }

  // optional string error_desc = 4;
  if (has_error_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->error_desc(), output);
  }

}

int XMMsgBindResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional string error_type = 2;
    if (has_error_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_type());
    }

    // optional string error_reason = 3;
    if (has_error_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_reason());
    }

    // optional string error_desc = 4;
    if (has_error_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_desc());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XMMsgBindResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const XMMsgBindResp*>(&from));
}

void XMMsgBindResp::MergeFrom(const XMMsgBindResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_error_type()) {
      set_error_type(from.error_type());
    }
    if (from.has_error_reason()) {
      set_error_reason(from.error_reason());
    }
    if (from.has_error_desc()) {
      set_error_desc(from.error_desc());
    }
  }
}

void XMMsgBindResp::CopyFrom(const XMMsgBindResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XMMsgBindResp::IsInitialized() const {

  return true;
}

void XMMsgBindResp::Swap(XMMsgBindResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_type_, other->error_type_);
    std::swap(error_reason_, other->error_reason_);
    std::swap(error_desc_, other->error_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string XMMsgBindResp::GetTypeName() const {
  return "ims.XMMsgBindResp";
}


// ===================================================================

#ifndef _MSC_VER
const int XMMsgPing::kStatsFieldNumber;
const int XMMsgPing::kPscFieldNumber;
#endif  // !_MSC_VER

XMMsgPing::XMMsgPing()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void XMMsgPing::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  psc_ = const_cast< ::protocol::PushServiceConfigMsg*>(
      ::protocol::PushServiceConfigMsg::internal_default_instance());
#else
  psc_ = const_cast< ::protocol::PushServiceConfigMsg*>(&::protocol::PushServiceConfigMsg::default_instance());
#endif
}

XMMsgPing::XMMsgPing(const XMMsgPing& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void XMMsgPing::SharedCtor() {
  _cached_size_ = 0;
  stats_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  psc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XMMsgPing::~XMMsgPing() {
  SharedDtor();
}

void XMMsgPing::SharedDtor() {
  if (stats_ != &::google::protobuf::internal::kEmptyString) {
    delete stats_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete psc_;
  }
}

void XMMsgPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const XMMsgPing& XMMsgPing::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ims_5fpush_5fservice_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ims_5fpush_5fservice_2eproto();
#endif
  return *default_instance_;
}

XMMsgPing* XMMsgPing::default_instance_ = NULL;

XMMsgPing* XMMsgPing::New() const {
  return new XMMsgPing;
}

void XMMsgPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stats()) {
      if (stats_ != &::google::protobuf::internal::kEmptyString) {
        stats_->clear();
      }
    }
    if (has_psc()) {
      if (psc_ != NULL) psc_->::protocol::PushServiceConfigMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool XMMsgPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes stats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_psc;
        break;
      }

      // optional .protocol.PushServiceConfigMsg psc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_psc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XMMsgPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes stats = 1;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->stats(), output);
  }

  // optional .protocol.PushServiceConfigMsg psc = 2;
  if (has_psc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->psc(), output);
  }

}

int XMMsgPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes stats = 1;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stats());
    }

    // optional .protocol.PushServiceConfigMsg psc = 2;
    if (has_psc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->psc());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XMMsgPing::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const XMMsgPing*>(&from));
}

void XMMsgPing::MergeFrom(const XMMsgPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats()) {
      set_stats(from.stats());
    }
    if (from.has_psc()) {
      mutable_psc()->::protocol::PushServiceConfigMsg::MergeFrom(from.psc());
    }
  }
}

void XMMsgPing::CopyFrom(const XMMsgPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XMMsgPing::IsInitialized() const {

  return true;
}

void XMMsgPing::Swap(XMMsgPing* other) {
  if (other != this) {
    std::swap(stats_, other->stats_);
    std::swap(psc_, other->psc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string XMMsgPing::GetTypeName() const {
  return "ims.XMMsgPing";
}


// ===================================================================

#ifndef _MSC_VER
const int XMMsgNotify::kErrCodeFieldNumber;
const int XMMsgNotify::kErrStrFieldNumber;
#endif  // !_MSC_VER

XMMsgNotify::XMMsgNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void XMMsgNotify::InitAsDefaultInstance() {
}

XMMsgNotify::XMMsgNotify(const XMMsgNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void XMMsgNotify::SharedCtor() {
  _cached_size_ = 0;
  err_code_ = 0;
  err_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XMMsgNotify::~XMMsgNotify() {
  SharedDtor();
}

void XMMsgNotify::SharedDtor() {
  if (err_str_ != &::google::protobuf::internal::kEmptyString) {
    delete err_str_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void XMMsgNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const XMMsgNotify& XMMsgNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ims_5fpush_5fservice_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ims_5fpush_5fservice_2eproto();
#endif
  return *default_instance_;
}

XMMsgNotify* XMMsgNotify::default_instance_ = NULL;

XMMsgNotify* XMMsgNotify::New() const {
  return new XMMsgNotify;
}

void XMMsgNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_code_ = 0;
    if (has_err_str()) {
      if (err_str_ != &::google::protobuf::internal::kEmptyString) {
        err_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool XMMsgNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_code_)));
          set_has_err_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_err_str;
        break;
      }

      // optional string err_str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XMMsgNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 err_code = 1;
  if (has_err_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_code(), output);
  }

  // optional string err_str = 2;
  if (has_err_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->err_str(), output);
  }

}

int XMMsgNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err_code = 1;
    if (has_err_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_code());
    }

    // optional string err_str = 2;
    if (has_err_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err_str());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XMMsgNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const XMMsgNotify*>(&from));
}

void XMMsgNotify::MergeFrom(const XMMsgNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_code()) {
      set_err_code(from.err_code());
    }
    if (from.has_err_str()) {
      set_err_str(from.err_str());
    }
  }
}

void XMMsgNotify::CopyFrom(const XMMsgNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XMMsgNotify::IsInitialized() const {

  return true;
}

void XMMsgNotify::Swap(XMMsgNotify* other) {
  if (other != this) {
    std::swap(err_code_, other->err_code_);
    std::swap(err_str_, other->err_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string XMMsgNotify::GetTypeName() const {
  return "ims.XMMsgNotify";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ims

// @@protoc_insertion_point(global_scope)
