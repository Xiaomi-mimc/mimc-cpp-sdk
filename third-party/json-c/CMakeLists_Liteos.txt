CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(json-c)
set(CMAKE_VERBOSE_MAKEFILE ON)
set(TOOL_CHAIN_GCC_ROOT /opt/hisi-linux/x86-arm/arm-hisiv500-linux/target)
add_definitions("-Os -fPIC -fno-exceptions -ffunction-sections -fdata-sections -Wall -Werror -D_GNU_SOURCE -D_REENTRANT -Wno-error=deprecated-declarations -Wextra -Wwrite-strings -Wno-implicit-fallthrough -Wno-unused-parameter")

set(CMAKE_SYSTEM_NAME Linux)
#set(CMAKE_SYSTEM_PROCESSOR aarch64)
set(CMAKE_AR             ${TOOL_CHAIN_GCC_ROOT}/bin/arm-hisiv500-linux-ar)
set(CMAKE_ASM_COMPILER   ${TOOL_CHAIN_GCC_ROOT}/bin/arm-hisiv500-linux-as)
set(CMAKE_RANLIB         ${TOOL_CHAIN_GCC_ROOT}/bin/arm-hisiv500-linux-ranlib)
set(CMAKE_C_COMPILER     ${TOOL_CHAIN_GCC_ROOT}/bin/arm-hisiv500-linux-gcc)
set(CMAKE_CXX_COMPILER   ${TOOL_CHAIN_GCC_ROOT}/bin/arm-hisiv500-linux-g++)
set(CMAKE_STRIP          ${TOOL_CHAIN_GCC_ROOT}/bin/arm-hisiv500-linux-strip)

set(CMAKE_FIND_ROOT_PATH ${TOOL_CHAIN_GCC_ROOT})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

file(GLOB C_FILES_IN_JSONC "${PROJECT_SOURCE_DIR}/json-c/*.c")
set(
        SOURCE_FILES
        ${C_FILES_IN_JSONC}
)
include_directories(${PROJECT_SOURCE_DIR})
add_library(json-c SHARED ${SOURCE_FILES})
